/** @typedef {import('../attribute').Attribute} Attribute */
const { AttributeType } = require('../attribute');
const { LanguageMeta } = require("./language");

class PHP extends LanguageMeta {
  getType(attribute, collections) {
    if (attribute.array) {
      return "array";
    }
    let type = ""
    switch (attribute.type) {
      case AttributeType.STRING:
      case AttributeType.EMAIL:
      case AttributeType.DATETIME:
        type = "string";
        if (attribute.format === AttributeType.ENUM) {
          type = LanguageMeta.toPascalCase(attribute.key);
        }
        break;
      case AttributeType.INTEGER:
        type = "int";
        break;
      case AttributeType.FLOAT:
        type = "float";
        break;
      case AttributeType.BOOLEAN:
        type = "bool";
        break;
      case AttributeType.RELATIONSHIP:
        const relatedCollection = collections.find(c => c.$id === attribute.relatedCollection);
        if (!relatedCollection) {
          throw new Error(`Related collection with ID '${attribute.relatedCollection}' not found.`);
        }
        type = LanguageMeta.toPascalCase(relatedCollection.name);
        if ((attribute.relationType === 'oneToMany' && attribute.side === 'parent') || (attribute.relationType === 'manyToOne' && attribute.side === 'child') || attribute.relationType === 'manyToMany') {
          type = "array";
        }
        break;
      default:
        throw new Error(`Unknown attribute type: ${attribute.type}`);
    }
    if (!attribute.required && attribute.default === null) {
      type += "|null";
    }
    return type;
  }

  getTemplate() {
    return `<?php
namespace Appwrite\\Models;

// This file is auto-generated by the Appwrite CLI. 
// You can regenerate it by running \`appwrite ${process.argv.slice(2).join(' ')}\`.

<% for (const attribute of collection.attributes) { -%>
<% if (attribute.type === 'relationship' && !(attribute.relationType === 'manyToMany') && !(attribute.relationType === 'oneToMany' && attribute.side === 'parent')) { -%>
use Appwrite\\Models\\<%- toPascalCase(collections.find(c => c.$id === attribute.relatedCollection).name) %>;

<% } -%>
<% } -%>
<% for (const attribute of collection.attributes) { -%>
<% if (attribute.format === 'enum') { -%>
enum <%- toPascalCase(attribute.key) %>: string {
<% for (const [index, element] of Object.entries(attribute.elements)) { -%>
    case <%- strict ? toUpperSnakeCase(element) : element %> = '<%- element %>';
<% } -%>
}

<% } -%>
<% } -%>
class <%- toPascalCase(collection.name) %> {
<% for (const attribute of collection.attributes ){ -%>
    private <%- getType(attribute, collections) %> $<%- strict ? toCamelCase(attribute.key) : attribute.key %>;
<% } -%>

    public function __construct(
<% for (const attribute of collection.attributes ){ -%>
<% if (attribute.required) { -%>
        <%- getType(attribute, collections).replace('|null', '') %> $<%- strict ? toCamelCase(attribute.key) : attribute.key %><% if (collection.attributes.indexOf(attribute) < collection.attributes.length - 1) { %>,<% } %>
<% } else { -%>
        ?<%- getType(attribute, collections).replace('|null', '') %> $<%- strict ? toCamelCase(attribute.key) : attribute.key %> = null<% if (collection.attributes.indexOf(attribute) < collection.attributes.length - 1) { %>,<% } %>
<% } -%>
<% } -%>
    ) {
<% for (const attribute of collection.attributes ){ -%>
        $this-><%- strict ? toCamelCase(attribute.key) : attribute.key %> = $<%- strict ? toCamelCase(attribute.key) : attribute.key %>;
<% } -%>
    }

<% for (const [index, attribute] of Object.entries(collection.attributes)) { -%>
    public function get<%- toPascalCase(attribute.key) %>(): <%- getType(attribute, collections) %> {
        return $this-><%- strict ? toCamelCase(attribute.key) : attribute.key %>;
    }

    public function set<%- toPascalCase(attribute.key) %>(<%- getType(attribute, collections) %> $<%- strict ? toCamelCase(attribute.key) : attribute.key %>): void {
        $this-><%- strict ? toCamelCase(attribute.key) : attribute.key %> = $<%- strict ? toCamelCase(attribute.key) : attribute.key %>;
    }
<% if (index < collection.attributes.length - 1) { %>
<% } -%>
<% } -%>
}
`;
  }

  getFileName(collection) {
    return LanguageMeta.toPascalCase(collection.name) + ".php";
  }
}

module.exports = { PHP };
