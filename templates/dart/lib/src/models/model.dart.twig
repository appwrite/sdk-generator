{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}<T>>{% else %}{{property.sub_schema | caseUcfirst | overrideIdentifier }}{% endif %}{% else %}{% if property.type == 'object' and property.additionalProperties %}Map<String, dynamic>{% else %}{{property | typeName}}{% endif %}{% endif %}{% endmacro %}
part of '../../models.dart';

/// {{ definition.description }}
class {{ definition.name | caseUcfirst | overrideIdentifier }}<T> implements Model {
{% for property in definition.properties %}
    /// {{ property.description }}
    final {% if not property.required %}{{_self.sub_schema(property)}}? {{ property.name | escapeKeyword }}{% else %}{{_self.sub_schema(property)}} {{ property.name | escapeKeyword }}{% endif %};

{% endfor %}
{%~ if definition.additionalProperties %}
    final T data;

{% endif %}
    {{ definition.name | caseUcfirst | overrideIdentifier}}({% if definition.properties | length or definition.additionalProperties %}{{ '{' }}{% endif %}

{% for property in definition.properties %}
{% if property.name starts with '_' %}
        {% if property.required %}required {% endif %}{{_self.sub_schema(property)}}{% if not property.required %}?{% endif %} {{ property.name | slice(1) | escapeKeyword }},
{% else %}
        {% if property.required %}required {% endif %}this.{{ property.name | escapeKeyword }},
{% endif %}
{% endfor %}
{% if definition.additionalProperties %}
        required this.data,
{% endif %}
    {% if definition.properties | length or definition.additionalProperties %}{{ '}' }}{% endif %}){% set hasUnderscoreProps = false %}{% for property in definition.properties %}{% if property.name starts with '_' %}{% set hasUnderscoreProps = true %}{% endif %}{% endfor %}{% if hasUnderscoreProps %} : 
{% for property in definition.properties %}
{% if property.name starts with '_' %}
        {{ property.name | escapeKeyword }} = {{ property.name | slice(1) | escapeKeyword }}{% if not loop.last %},{% endif %}

{% endif %}
{% endfor %}{% endif %};

    factory {{ definition.name | caseUcfirst | overrideIdentifier}}.fromMap(Map<String, dynamic> map, [T Function(Map<String, dynamic>)? fromJson]) {
        return {{ definition.name | caseUcfirst | overrideIdentifier }}(
{% for property in definition.properties %}
{% if property.name starts with '_' %}
            {{ property.name | slice(1) | escapeKeyword }}:{{' '}}{% else %}
            {{ property.name | escapeKeyword }}:{{' '}}
{% endif %}
            {%- if property.sub_schema -%}
                {%- if property.type == 'array' -%}
                    List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}<T>>.from(map['{{property.name | escapeDollarSign }}'].map((p) => {{property.sub_schema | caseUcfirst | overrideIdentifier}}.fromMap(p, fromJson)))
                {%- else -%}
                    {{property.sub_schema | caseUcfirst | overrideIdentifier}}.fromMap(map['{{property.name | escapeDollarSign }}'])
                {%- endif -%}
            {%- else -%}
                {%- if property.type == 'array' -%}
                    List.from(map['{{property.name | escapeDollarSign }}'] ?? [])
                {%- else -%}
                    map['{{property.name | escapeDollarSign }}']
                    {%- if property.type == "number" -%}
                        {%- if not property.required %}?{% endif %}.toDouble()
                    {%- endif -%}
                    {%- if property.type == "string" -%}
                        {%- if not property.required %}?{% endif %}.toString()
                    {%- endif -%}
                {%- endif -%}
            {%- endif -%},
{% endfor %}
{% if definition.additionalProperties %}
            data: fromJson != null ? fromJson(map) : map as T,
{% endif %}
        );
    }

    Map<String, dynamic> toMap() {
        return {
{% for property in definition.properties %}
            "{{ property.name | escapeDollarSign }}": {% if property.sub_schema %}{% if property.type == 'array' %}{{property.name | escapeKeyword}}.map((p) => p.toMap()).toList(){% else %}{{property.name | escapeKeyword}}.toMap(){% endif %}{% else %}{{property.name | escapeKeyword }}{% endif %},
{% endfor %}
{% if definition.additionalProperties %}
            "data": data,
{% endif %}
        };
    }
{% if definition.additionalProperties %}

    T convertTo<T>(T Function(Map<String, dynamic>) fromJson) => fromJson(data as Map<String, dynamic>);
{% endif %}
{% for property in definition.properties %}
{% if property.sub_schema %}
{% for def in spec.definitions %}
{% if def.name == property.sub_schema and def.additionalProperties and property.type == 'array' %}

    List<T> convertTo<T>(T Function(Map) fromJson) =>
        {{property.name}}.map((d) => d.convertTo<T>(fromJson)).toList();
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}

    // Public getters for private underscore fields
{% for property in definition.properties %}
{% if property.name starts with '_' %}
    {{_self.sub_schema(property)}}{% if not property.required %}?{% endif %} get {{ property.name | slice(1) | escapeKeyword }} => {{ property.name | escapeKeyword }};
{% endif %}
{% endfor %}
}
