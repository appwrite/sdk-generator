package {{ sdk.namespace | caseDot }}

import {{ sdk.namespace | caseDot }}.cookies.IosCookieStorage
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import platform.Foundation.NSBundle
import platform.UIKit.UIDevice

actual class Client(
    endpoint: String = "{{spec.endpoint}}",
    endpointRealtime: String? = null,
    selfSigned: Boolean = false,
) : BaseClient<Client>(endpoint, endpointRealtime) {
    actual override val coroutineContext = Job() + Dispatchers.Default

    private val appVersion: String by lazy {
        NSBundle.mainBundle.infoDictionary?.get("CFBundleShortVersionString") as? String ?: ""
    }

    private val bundleId: String by lazy {
        NSBundle.mainBundle.bundleIdentifier ?: ""
    }

    val iosCookieStorage = IosCookieStorage()

    init {
        httpClient = createHttpClient(selfSigned, iosCookieStorage)
        val appName =
        NSBundle.mainBundle.objectForInfoDictionaryKey("CFBundleDisplayName") as String?
            ?: NSBundle.mainBundle.objectForInfoDictionaryKey("CFBundleName") as? String
                ?: ""
        val version =
            NSBundle.mainBundle.objectForInfoDictionaryKey("CFBundleShortVersionString") as String?
                ?: ""

        headers = mutableMapOf(
            "content-type" to "application/json",
            "x-sdk-name" to "{{ sdk.name }}",
            "x-sdk-platform" to "{{ sdk.platform }}",
            "x-sdk-language" to "{{ language.name | caseLower }}",
            "x-sdk-version" to "{{ sdk.version }}",
            "user-agent" to "${appName}/${version} ios",
            "origin" to "{{ spec.title | caseLower }}-ios://${appName}",
            {%~ for key,header in spec.global.defaultHeaders %}
            "{{key | caseLower }}" to "{{header}}"{% if not loop.last %},{% endif %}

            {%~ endfor %}
          )
    }

    actual fun setSelfSigned(value: Boolean): Client {
        httpClient = createHttpClient(value, iosCookieStorage)
        return this
    }
}
