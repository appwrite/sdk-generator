const fs = require('fs');
const pathLib = require('path');
const tar = require("tar");
const ignore = require("ignore");
const { promisify } = require('util');
const libClient = require('../client.js');
const { getAllFiles } = require('../utils.js');
const { Command } = require('commander');
const { sdkForProject, sdkForConsole } = require('../sdks')
const { parse, actionRunner, parseInteger, parseBool, commandDescriptions, success, log } = require('../parser')
const { localConfig, globalConfig } = require("../config");

const {{ service.name | caseLower }} = new Command("{{ service.name | caseLower }}").description(commandDescriptions['{{ service.name | caseLower }}'])

{% for method in service.methods %}
const {{ service.name | caseLower }}{{ method.name | caseUcfirst }} = async ({ {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}, {% endfor %}parseOutput = true, sdk = undefined{% if 'multipart/form-data' in method.consumes %}, onProgress = () => {}{% endif %}{% if method.type == 'location' %}, destination{% endif %}}) => {
{% for parameter in method.parameters.all %}
    /* @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }} */
{% endfor %}

    let client = !sdk ? await {% if service.name == "projects" %}sdkForConsole(){% else %}sdkForProject(){% endif %} : sdk;
    let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
    let payload = {};
{% if method.parameters.query|length > 0 %}

    /** Query Params */
{% endif %}
{% for parameter in method.parameters.query %}
    if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
        payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }};
    }
{% endfor %}
{% if method.parameters.body|length > 0 %}
    
    /** Body Params */
{% endif %}
{% for parameter in method.parameters.body %}
{% if parameter.type == 'file' and method.packaging %}
    let folderPath = fs.realpathSync({{ parameter.name | caseCamel | escapeKeyword }});
    if (!fs.lstatSync(folderPath).isDirectory())
        throw new Error('The path is not a directory.');
    
    const ignorer = ignore();

    const func = localConfig.getFunction(functionId);

    if(func.ignore) {
        ignorer.add(func.ignore);
        log('Ignoring files using configuration from appwrite.json');
    } else if(fs.existsSync(pathLib.join({{ parameter.name | caseCamel | escapeKeyword }}, '.gitignore'))) {
        ignorer.add(fs.readFileSync(pathLib.join({{ parameter.name | caseCamel | escapeKeyword }}, '.gitignore')).toString());
        log('Ignoring files in .gitignore');
    }
    
    const files = getAllFiles({{ parameter.name | caseCamel | escapeKeyword }}).map((file) => pathLib.relative({{ parameter.name | caseCamel | escapeKeyword }}, file)).filter((file) => !ignorer.ignores(file));

    await tar
        .create({
            gzip: true,
            sync: true,
            cwd: folderPath,
            file: 'code.tar.gz'
        }, files);
    let archivePath = fs.realpathSync('code.tar.gz')
    if (typeof archivePath !== 'undefined') {
        payload['{{ parameter.name }}'] = archivePath;
        {{ parameter.name }} = archivePath;
    }

{% elseif parameter.type == 'file' %}
    let filePath = fs.realpathSync({{ parameter.name | caseCamel | escapeKeyword }});
    if (typeof filePath !== 'undefined') {
        payload['{{ parameter.name }}'] = filePath;
    }

{% elseif parameter.type == 'object' %}
    if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
        payload['{{ parameter.name }}'] = JSON.parse({{ parameter.name | caseCamel | escapeKeyword}});
    }

{% else %}
    if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
        payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword}}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" ) %}.toString(){% endif %};
    }

{% endif %}
{% endfor %}
{% if method.type == 'location' %}
    payload['project'] = localConfig.getProject().projectId
    payload['key'] = globalConfig.getKey();
    const queryParams = new URLSearchParams(payload);
    path = `${globalConfig.getEndpoint()}${path}?${queryParams.toString()}`;

    const response = await client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
        '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
        '{{ key }}': '{{ header }}',
{% endfor %}
    }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});

    fs.writeFileSync(destination, response);

    if (parseOutput) { 
        log(`File stored in ${destination}`)
        success()
    }
{% else %}
    let response = undefined;
{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
    const { size: size } = await promisify(fs.stat)({{ parameter.name | caseCamel | escapeKeyword }});

    if (size <= libClient.CHUNK_SIZE) {
        payload['{{ parameter.name }}'] = fs.createReadStream(payload['{{ parameter.name }}']);

        response = await client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %}){% if method.packaging %}.catch(err => {
            fs.unlinkSync(archivePath);
            throw err
        });{% endif %}

    } else {
        const streamFilePath = payload['{{ parameter.name }}'];
        let id = undefined;

        let counter = 0;
        const totalCounters = Math.ceil(size / libClient.CHUNK_SIZE);

        const headers = {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        };

{% for parameter in method.parameters.all %}
{% if parameter.isUploadID %}
        if({{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
            try {
                response = await client.call('get', path + '/' + {{ parameter.name }}, headers);
                counter = response.chunksUploaded;
            } catch(e) {
            }
        }
{% endif %}
{% endfor %}

        for (counter; counter < totalCounters; counter++) {
            const start = (counter * libClient.CHUNK_SIZE);
            const end = Math.min((((counter * libClient.CHUNK_SIZE) + libClient.CHUNK_SIZE) - 1), size);

            headers['content-range'] = 'bytes ' + start + '-' + end + '/' + size;

            if (id) {
                headers['x-appwrite-id'] = id;
            }

            const stream = fs.createReadStream(streamFilePath, {
                start,
                end
            });
            payload['{{ parameter.name }}'] = stream;

            response = await client.call('{{ method.method | caseLower }}', path, headers, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});

            if (!id) {
                id = response['$id'];
            }

            if (onProgress !== null) {
                onProgress({
                    $id: response['$id'],
                    progress: Math.min((counter+1) * libClient.CHUNK_SIZE, size) / size * 100,
                    sizeUploaded: end+1,
                    chunksTotal: response['chunksTotal'],
                    chunksUploaded: response['chunksUploaded']
                });
            }
        }
    }
{% endif %}
{% endfor %}
{% else %}
    response = await client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
        '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
        '{{ key }}': '{{ header }}',
{% endfor %}
    }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});
{% endif %}
{% if method.packaging %}

    fs.unlinkSync(archivePath);
{% endif %}
    
    if (parseOutput) {
        parse(response)
        success()
    }
    return response;
{% endif %}
}

{% endfor %}

{% for method in service.methods %}
{{service.name | caseLower }}
    .command(`{{ method.name | caseCamel }}`)
{% autoescape false %}
    .description(`{{ method.description | replace({'`':'\''}) | replace({'\n':' '}) | replace({'\n \n':' '}) }}`)
{% for parameter in method.parameters.all %}
    .{% if parameter.required %}requiredOption{% else %}option{% endif %}(`--{{ parameter.name | escapeKeyword }} <{{ parameter.name | escapeKeyword }}{% if parameter.array.type|length > 0 %}...{% endif %}>`, `{{ parameter.description | replace({'`':'\''}) | replace({'\n':' '}) | replace({'\n \n':' '}) }}`{% if parameter.type|typeName == 'boolean' %}, parseBool{% elseif parameter.type|typeName == 'number' %}, parseInteger{% endif %})
{% endfor %}
{% if method.type == 'location' %}
    .requiredOption(`--destination <path>`, `output file path.`)
{% endif %}
{% endautoescape %}
    .action(actionRunner({{ service.name | caseLower }}{{ method.name | caseUcfirst }}))

{% endfor %}

module.exports = {
    {{ service.name | caseLower }},
{% for method in service.methods %}
    {{ service.name | caseLower }}{{ method.name | caseUcfirst }}{% if not loop.last %},{% endif %}

{% endfor %}
};
