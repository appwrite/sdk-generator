import "isomorphic-form-data";
import { fetch } from "cross-fetch";

type Payload = {
    [key: string]: any;
}

type Headers = {
    [key: string]: string;
}

class {{spec.title | caseUcfirst}}Exception extends Error {
    code: number;
    response: string;
    constructor(message: string, code: number = 0, response: string = '') {
        super(message);
        this.name = '{{spec.title | caseUcfirst}}Exception';
        this.message = message;
        this.code = code;
        this.response = response;
    }
}

class {{ spec.title | caseUcfirst }} {
    config = {
        endpoint: '{{ spec.endpoint }}',
{% for header in spec.global.headers %}
        {{ header.key | caseLower }}: '',
{% endfor %}
    };
    headers: Headers = {
        'x-sdk-version': '{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}',
{% for key,header in spec.global.defaultHeaders %}
        '{{key}}': '{{header}}',
{% endfor %}
    };

    /**
     * Set Endpoint
     *
     * Your project endpoint
     *
     * @param {string} endpoint
     *
     * @returns {this}
     */
    setEndpoint(endpoint: string): this {
        this.config.endpoint = endpoint;

        return this;
    }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
{{header.description|comment2}}
     *
{% endif %}
     * @param value string
     *
     * @return {this}
     */
    set{{header.key | caseUcfirst}}(value: string): this {
        this.headers['{{header.name}}'] = value;
        this.config.{{ header.key | caseLower }} = value;
        return this;
    }

{% endfor %}
    private async call(method: string, url: URL, headers: Headers = {}, params: Payload = {}): Promise<any> {
        method = method.toUpperCase();
        headers = {
            ...headers,
            ...this.headers
        }
        let options: RequestInit = {
            method,
            headers,
            credentials: 'include'
        };

        if (typeof window !== 'undefined' && window.localStorage) {
            headers['X-Fallback-Cookies'] = window.localStorage.getItem('cookieFallback') ?? "";
        }

        if (method === 'GET') {
            for (const [key, value] of Object.entries(this.flatten(params))) {
                url.searchParams.append(key, value);
            }
        } else {
            switch (headers['content-type']) {
                case 'application/json':
                    options.body = JSON.stringify(params);
                    break;

                case 'multipart/form-data':
                    let formData = new FormData();

                    for (const key in params) {
                        if (Array.isArray(params[key])) {
                            formData.append(key + '[]', params[key].join(','));
                        } else {
                            formData.append(key, params[key]);
                        }
                    }

                    options.body = formData;
                    delete headers['content-type'];
                    break;
            }
        }

        try {
            let data = null;
            const response = await fetch(url.toString(), options);

            if (response.headers.get("content-type")?.includes("application/json")) {
                data = await response.json();
            } else {
                data = {
                    message: await response.text()
                };
            }
            
            if (400 <= response.status) {
                throw new {{spec.title | caseUcfirst}}Exception(data?.message, response.status, data);
            }

            const cookieFallback = response.headers.get('X-Fallback-Cookies');

            if (typeof window !== 'undefined' && window.localStorage && cookieFallback) {
                window.console.warn('Appwrite is using localStorage for session management. Increase your security by adding a custom domain as your API endpoint.');
                window.localStorage.setItem('cookieFallback', cookieFallback);
            }

            return data;
        } catch (e) {
            throw new {{spec.title | caseUcfirst}}Exception(e.message);
        }
    }

    private flatten(data: Payload, prefix = ''): Payload {
        let output: Payload = {};

        for (const key in data) {
            let value = data[key];
            let finalKey = prefix ? `${prefix}[${key}]` : key;

            if (Array.isArray(value)) {
                output = Object.assign(output, this.flatten(value, finalKey));
            }
            else {
                output[finalKey] = value;
            }
        }

        return output;
    }

{% for service in spec.services %}
    {{service.name | caseCamel}} = {
{% for method in service.methods %}

        /**
         * {{ method.title }}
         *
{% if method.description %}
{{ method.description|comment3 }}
{% endif %}
         *
{% for parameter in method.parameters.all %}
         * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
         * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
         * @returns {% if method.type == 'webAuth' %}{void|string}{% elseif method.type == 'location' %}{URL}{% else %}{Promise}{% endif %}

         */
        {{ method.name | caseCamel }}: {% if method.type != "location" and method.type != 'webAuth'%}async <T extends unknown>{% endif %}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %}?{% endif %}: {{ parameter.type | typeName }}{% if not loop.last %}, {% endif %}{% endfor %}): {% if method.type == 'webAuth' %}void | URL{% elseif method.type == 'location' %}URL{% else %}Promise<T>{% endif %} => {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
            if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
                throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
            }

{% endif %}
{% endfor %}
            let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
            let payload: Payload = {};

{% for parameter in method.parameters.query %}
            if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
                payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }};
            }

{% endfor %}
{% for parameter in method.parameters.body %}
            if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
                payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }};
            }

{% endfor %}
            const uri = new URL(this.config.endpoint + path);
{% if method.type == 'location' or method.type == 'webAuth' %}
{% if method.security|length > 0 %}
{% for node in method.security %}
{% for key,header in node|keys %}
            payload['{{header|caseLower}}'] = this.config.{{header|caseLower}};

{% endfor %}
{% endfor %}
{% endif %}

            for (const [key, value] of Object.entries(this.flatten(payload))) {
                uri.searchParams.append(key, value);
            }
{% endif %}
{% if method.type == 'webAuth' %}
            if (typeof window !== 'undefined' && window?.location) {
                window.location.href = uri.toString();
            } else {
                return uri;
            }
{% elseif method.type == 'location' %}
            return uri;
{% else %}
            return await this.call('{{ method.method | caseLower }}', uri, {
{% for parameter in method.parameters.header %}
                '{{ parameter.name | caseCamel | escapeKeyword }}': this.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            }, payload);
{% endif %}
        }{% if not loop.last %},
{% endif %}
{% endfor %}

    };

{% endfor %}
};

export { {{spec.title | caseUcfirst}} }
export type { {{spec.title | caseUcfirst}}Exception }