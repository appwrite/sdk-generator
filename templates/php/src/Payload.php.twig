<?php
namespace {{ spec.title | caseUcfirst }};

class Payload {
    private ?string $data;
    private ?string $mimeType;
    private ?string $filename;
    private ?string $path;

    public function __construct(){}

    public function getData(): ?string
    {
        return $this->data;
    }

    public function getPath(): ?string
    {
        return $this->path;
    }

    public function getMimeType(): ?string
    {
        return $this->mimeType;
    }

    public function getFilename(): ?string
    {
        return $this->filename;
    }

    public static function fromFile(string $path, ?string $mimeType = null, ?string $filename = null): self
    {
        $instance = new Payload();
        $instance->path = $path;
        $instance->data = null;
        $instance->mimeType = $mimeType;
        $instance->filename = $filename;
        return $instance;
    }

    public static function fromBinary(string $data, ?string $mimeType = null, ?string $filename = null): self
    {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = $data;
        $instance->mimeType = $mimeType;
        $instance->filename = $filename;
        return $instance;
    }

    public static function fromJson(array $data): self
    {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = json_encode($data);
        return $instance;
    }

    public static function fromString(string $data): self
    {
        $instance = new Payload();
        $instance->path = null;
        $instance->data = $data;
        return $instance;
    }

    public function toBinary(): string
    {
        return $this->data;
    }

    public function toJson(): mixed
    {
        return json_decode($this->data, true);
    }

    public function toString(): string
    {
        return $this->data;
    }
}
