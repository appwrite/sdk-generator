const Service = require('../service.js');
const {{spec.title | caseUcfirst}}Exception = require('../exception.js');
const client = require('../client.js');
const { promisify } = require('util');
const fs = require('fs');

class {{ service.name | caseUcfirst }} extends Service {
{% for method in service.methods %}

    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
     * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
     * @returns {Promise}
     */
    async {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = () => {}{% endif %}) {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
        }

{% endif %}
{% endfor %}
        let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
        let payload = {};
{% for parameter in method.parameters.query %}

        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" ) %}.toString(){% endif %};
        }
{% endfor %}
{% for parameter in method.parameters.body %}

        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword}}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" ) %}.toString(){% endif %};
        }
{% endfor %}

{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
        const { size: size } = await promisify(fs.stat)({{ parameter.name | caseCamel | escapeKeyword }});

        if (size <= client.CHUNK_SIZE) {
            payload['{{ parameter.name }}'] = fs.createReadStream({{ parameter.name | caseCamel | escapeKeyword }});
                
            return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
                '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});
        } else {
            let id = undefined;
            let response = undefined;

            let counter = 0;
            const totalCounters = Math.ceil(size / client.CHUNK_SIZE);

            const headers = {
{% for parameter in method.parameters.header %}
                '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            };

{% for parameter in method.parameters.all %}
{% if parameter.isUploadID %}
            if({{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
                try {
                    response = await this.client.call('get', path + '/' + {{ parameter.name }}, headers);
                    counter = response.chunksUploaded;
                } catch(e) {
                }
            }
{% endif %}
{% endfor %}

            for (counter; counter < totalCounters; counter++) {
                const start = (counter * client.CHUNK_SIZE);
                const end = Math.min((((counter * client.CHUNK_SIZE) + client.CHUNK_SIZE) - 1), size);

                headers['content-range'] = 'bytes ' + start + '-' + end + '/' + size;

                if (id) {
                    headers['x-{{spec.title | caseLower }}-id'] = id;
                }

                const stream = fs.createReadStream({{ parameter.name | caseCamel | escapeKeyword }}, {
                    start,
                    end
                });
                payload['{{ parameter.name }}'] = stream;

                response = await this.client.call('{{ method.method | caseLower }}', path, headers, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});

                if (!id) {
                    id = response['$id'];
                }
                
                if (onProgress !== null) {
                    onProgress({
                        $id: response['$id'],
                        progress: Math.min((counter+1) * client.CHUNK_SIZE, size) / size * 100,
                        sizeUploaded: end+1,
                        chunksTotal: response['chunksTotal'],
                        chunksUploaded: response['chunksUploaded']
                    });
                }
            }

            return response;
        }
{% endif %}
{% endfor %}
{% else %}
        return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});
{% endif %}
    }
{% endfor %}
}

module.exports = {{ service.name | caseUcfirst }};