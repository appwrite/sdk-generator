import 'dart:convert';

import 'exception.dart';

/// Helper class to handle files.
class Payload {
  late final String? path;
  late final List<int>? bytes;
  final String? filename;
  final String? contentType;

  Payload._({this.path, this.filename, this.contentType, this.bytes}) {
    if (path == null && bytes == null) {
      throw AppwriteException('One of `path` or `bytes` is required');
    }
  }

  /// Provide a file using `path`
  factory Payload.fromPath({
    required String path,
    String? filename,
    String? contentType,
  }) {
    return Payload._(
      path: path,
      filename: filename,
      contentType: contentType,
    );
  }

  /// Provide a file using `bytes`
  factory Payload.fromBytes({
    required List<int> bytes,
    required String filename,
    String? contentType,
  }) {
    return Payload._(
      bytes: bytes,
      filename: filename,
      contentType: contentType,
    );
  }

  factory Payload.fromString(String string) =>
      Payload.fromBytes(bytes: string.codeUnits, filename: '');

  factory Payload.fromJSON(Map<String, dynamic> data) =>
      Payload.fromString(jsonEncode(data));

  String toString() {
    if (bytes == null) {
      throw ArgumentError.notNull('bytes');
    }
    return String.fromCharCodes(bytes!);
  }

  List<int> toBinary() {
    if (bytes == null) {
      throw ArgumentError.notNull('bytes');
    }
    return bytes!;
  }

  Map<String, dynamic> toJson() {
    return jsonDecode(toString());
  }
}
