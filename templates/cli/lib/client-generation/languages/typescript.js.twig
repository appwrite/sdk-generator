/** @typedef {import('../../type-generation/attribute').Attribute} Attribute */
const fs = require("fs");
const path = require("path");

const { LanguageMeta } = require("../../type-generation/languages/language");

class TypeScriptClient {
  constructor() {
    // Empty constructor
  }

  _getAppwriteDependency() {
    if (fs.existsSync(path.resolve(process.cwd(), 'package.json'))) {
      const packageJsonRaw = fs.readFileSync(path.resolve(process.cwd(), 'package.json'));
      const packageJson = JSON.parse(packageJsonRaw.toString('utf-8'));
      return packageJson.dependencies['node-appwrite'] ? 'node-appwrite' : 'appwrite';
    }

    if (fs.existsSync(path.resolve(process.cwd(), 'deno.json'))) {
      return "https://deno.land/x/appwrite/mod.ts";
    }

    return "appwrite";
  }

  getFileName() {
    return "appwrite.db.ts";
  }

  getTemplate() {
    return `import { Client, Databases, type Models } from '${this._getAppwriteDependency()}';
<% const typeNames = collections.map(c => toPascalCase(c.name)); -%>
<% const importPath = typesFileName.replace(/\.d\.ts$/, '').replace(/\.ts$/, ''); -%>
import type { <%- typeNames.join(', ') %> } from './<%- importPath %>';

// This file is auto-generated by the Appwrite CLI. 
// You can regenerate it by running \`appwrite ${process.argv.slice(2).join(' ')}\`.

const client = new Client();
const databases = new Databases(client);

client
  .setEndpoint('<%- endpoint %>')
  .setProject('<%- projectId %>');

export const db = {
<% for (const collection of collections) { -%>
  <%- strict ? toCamelCase(collection.name) : collection.name %>: {
    create: (data: <%- toPascalCase(collection.name) %>) => 
      databases.createDocument<<%- toPascalCase(collection.name) %>>('<%- collection.databaseId %>', '<%- collection.$id %>', 'unique()', data),
    get: (id: string) => 
      databases.getDocument<<%- toPascalCase(collection.name) %>>('<%- collection.databaseId %>', '<%- collection.$id %>', id),
    update: (id: string, data: Partial<<%- toPascalCase(collection.name) %>>) => 
      databases.updateDocument<<%- toPascalCase(collection.name) %>>('<%- collection.databaseId %>', '<%- collection.$id %>', id, data),
    delete: (id: string) => 
      databases.deleteDocument('<%- collection.databaseId %>', '<%- collection.$id %>', id),
    list: (queries?: string[]) => 
      databases.listDocuments<<%- toPascalCase(collection.name) %>>('<%- collection.databaseId %>', '<%- collection.$id %>', queries),
  },
<% } -%>
};`;
  }
}

module.exports = { TypeScriptClient };
