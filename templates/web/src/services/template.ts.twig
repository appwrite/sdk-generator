import { Service } from '../service';
import { {{ spec.title | caseUcfirst}}Exception, Client } from '../client';
import type { Models } from '../models';
import type { UploadProgress, Payload } from '../client';

export class {{ service.name | caseUcfirst }} extends Service {

     constructor(client: Client)
     {
        super(client);
     }
{% for method in service.methods %}

        /**
         * {{ method.title }}
         *
{% if method.description %}
{{ method.description|comment3 }}
{% endif %}
         *
{% for parameter in method.parameters.all %}
         * @param {{ '{' }}{{ parameter | getPropertyType(method) | raw }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
         * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
         * @returns {% if method.type == 'webAuth' %}{void|string}{% elseif method.type == 'location' %}{URL}{% else %}{Promise}{% endif %}

         */
        {% if method.type != 'location' and method.type != 'webAuth'%}async {% endif %}{{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = (progress: UploadProgress) => {}{% endif %}): {{ method | getReturn(spec) | raw }} {
{{include('web/base/params.twig')}}
            let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};

            const uri = new URL(this.client.config.endpoint + path);
{% if method.type == 'location' or method.type == 'webAuth' %}
{% if method.auth|length > 0 %}
{% for node in method.auth %}
{% for key,header in node|keys %}
            payload['{{header|caseLower}}'] = this.client.config.{{header|caseLower}};

{% endfor %}
{% endfor %}
{% endif %}

            for (const [key, value] of Object.entries(Service.flatten(payload))) {
                uri.searchParams.append(key, value);
            }
{% endif %}
{% if method.type == 'webAuth' %}
            if (typeof window !== 'undefined' && window?.location) {
                window.location.href = uri.toString();
            } else {
                return uri;
            }
{% elseif method.type == 'location' %}
            return uri;
{% else %}
{% if 'multipart/form-data' in method.consumes %}
{{include('web/base/requests/file.twig')}}
{% else %}
{{include('web/base/requests/api.twig')}}
{% endif %}
{% endif %}
        }
{% endfor %}
};
