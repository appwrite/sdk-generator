defmodule Appwrite.Client do
  @moduledoc false

  alias {{spec.title | caseUcfirst}}.Error
  alias {{spec.title | caseUcfirst}}.InputFile
  alias Tesla.Multipart

  defstruct endpoint: "{{spec.endpoint}}",
            chunk_size: 5 * 1024 * 1024,
            http_client: nil,
            global_headers: %{
              "x-sdk-name" => "{{sdk.name}}",
              "x-sdk-platform" => "{{sdk.platform}}",
              "x-sdk-language" => "{{language.name | caseLower}}",
              "x-sdk-version" => "{{sdk.version}}",
{% for key,header in spec.global.defaultHeaders %}
              "{{key}}" => "{{header}}",
{% endfor %}
            },
            self_signed?: false

  def get_client(endpoint \\ "{{spec.endpoint}}", opts \\ []) do
    self_signed? =
      if is_nil(opts[:self_signed?]) do
        false
      else
        opts[:self_signed?]
      end

    %__MODULE__{endpoint: endpoint, self_signed?: self_signed?}
    |> setup_http_client
  end

  def update_params(%__MODULE__{} = client, opts) do
    global_headers = Map.merge(client.global_headers, opts[:global_headers] or %{})

    self_signed? =
      if is_nil(opts[:self_signed?]) do
        client.self_signed?
      else
        opts[:self_signed?]
      end

    %__MODULE__{
      chunk_size: opts[:chunk_size] or client.chunk_size,
      endpoint: opts[:endpoint] or client.endpoint,
      global_headers: global_headers,
      self_signed?: self_signed?
    }
  end

  def add_headers(%__MODULE__{global_headers: headers} = client, %{} = new_headers) do
    new_headers = Map.merge(headers, new_headers)
    %{client | global_headers: new_headers}
  end

  def add_header(%__MODULE__{} = client, header, value) do
    add_headers(client, %{header => value})
  end

  def remove_header(%__MODULE__{global_headers: headers} = client, header_name) do
    {_, new_headers} = Map.pop(headers, header_name)
    %{client | global_headers: new_headers}
  end

  def set_self_signed(client, status \\ true) do
    %{client | self_signed?: status}
  end

  def set_endpoint(client, endpoint) do
    %{client | endpoint: endpoint}
    |> setup_http_client
  end
{% for header in spec.global.headers %}

{% if header.description %}
  @doc "{{header.description}}"
{% endif %}
  def set_{{header.key | caseSnake}}(client, value) do
    %{client | "{{header.name|lower}}": value}
  end
{% endfor %}

  defp setup_http_client(%__MODULE__{} = client) do
    middleware = [
      {Tesla.Middleware.BaseUrl, client.endpoint},
      Tesla.Middleware.JSON,
      Tesla.Middleware.FollowRedirects
    ]

    r = Tesla.client(middleware)

    %{client | http_client: r}
  end

  defp handle_response(response) do
    if response.status >= 400 do
      case response do
        %{body: %{"message" => message}} ->
          {:error, {:{{spec.title | caseSnake}}_error, message, response.status, response}}
        %{body: body} ->
          {:error, {:{{spec.title | caseSnake}}_error, body, response.status, response}}
      end
    else
      {:ok, response}
    end
  end

  def call(client, method, path, request_headers, params \\ %{}) do
    {params, body} =
      if method != :get do
        {% verbatim %}{%{}, params}{% endverbatim %}
      else
        {params, nil}
      end

    headers =
      Map.merge(client.global_headers, request_headers)
      |> Map.to_list()

    case Tesla.request(client.http_client,
      method: method,
      url: path,
      headers: headers,
      body: body,
      query: params
    ) do
      {:ok, response} -> handle_response(response)
      {:error, error} -> {:error, error}
    end
  end

  defp chunks(binary, n) do
    do_chunks(binary, n, [])
  end

  defp do_chunks(binary, n, acc) when byte_size(binary) <= n do
    Enum.reverse([binary | acc])
  end

  defp do_chunks(binary, n, acc) do
    <<chunk::binary-size(n), rest::binary>> = binary
    do_chunks(rest, n, [<<chunk::binary-size(n)>> | acc])
  end

  def chunked_upload(client, path, _headers, params, param_name, on_progress, upload_id) do
    {input_file, params} = Map.pop!(params, param_name)

    {size, stream, file_name} =
      case input_file do
        %InputFile{file_content: content, file_name: file_name, file_path: nil} ->
          size = byte_size(content)
          stream = chunks(content, client.chunk_size)
          {size, stream, file_name}

        %InputFile{file_content: nil, file_name: file_name, file_path: file_path} ->
          file_name =
            if is_nil(file_name) do
              Path.basename(file_path)
            else
              file_name
            end

          size = File.stat!(file_path).size
          stream = File.stream!(file_path, [], client.chunk_size)
          {size, stream, file_name}

        _ ->
          throw(
            Error.exception(
              "Please provide an %Appwrite.InputFile{} struct with either file_content or file_path defined.\n" <>
                "example: %InputFile{file_content: \"content\", file_path: nil}"
            )
          )
      end

    offset = get_offset(client, path, upload_id)

    stream
    |> Stream.drop(offset)
    |> Enum.reduce(
      %{
        client: client,
        path: path,
        params: params,
        on_progress: on_progress,
        upload_id: upload_id,
        size: size,
        file_name: file_name,
        offset: offset,
        headers: %{},
        response: nil
      },
      fn x, acc -> upload_part(x, acc) end
    )
    |> Map.get(:response)
    |> handle_response
  end

  defp get_offset(_client, _path, "unique()"), do: 0

  defp get_offset(client, path, upload_id) do
    case call(client, :get, "#{path}/#{upload_id}", %{"content-type" => "text/json"}) do
      {:ok, %{body: response}} ->
        case response["chunksUploaded"] do
          nil -> 0
          offset -> offset
        end
      {:error, _} -> 0
    end
  end

  defp upload_part(chunk, params) do
    client = params.client

    mp =
      Multipart.new()
      |> Multipart.add_content_type_param("charset=utf-8")
      |> Multipart.add_file_content(chunk, params.file_name)
    
    mp =
      params.params
      |> flatten
      |> Enum.reduce(mp, fn {key, value}, acc -> Multipart.add_field(acc, key, "#{value}") end)

    request_headers =
      client.global_headers
      |> Map.merge(params.headers)
      |> add_chunk_header(params.offset, client.chunk_size, params.size)
      |> Map.to_list()

    {:ok, response} =
      Tesla.request(client.http_client,
        method: :post,
        url: params.path,
        headers: request_headers,
        body: mp
      )

    notify_progress(response, params)
    headers = set_appwrite_id_header(params.headers, response.body["$id"])

    %{params | offset: params.offset + 1, headers: headers, response: response}
  end

  defp add_chunk_header(headers, _offset, chunk_size, file_size) when chunk_size > file_size,
    do: headers

  defp add_chunk_header(headers, offset, chunk_size, file_size) do
    sent_size = get_size(offset, chunk_size, file_size)
    end_range = Enum.min([sent_size + chunk_size - 1, file_size])

    Map.put(headers, "content-range", "bytes #{sent_size}-#{end_range}/#{file_size}")
  end

  defp notify_progress(_response, %{on_progress: nil}), do: :ok

  defp notify_progress(response, params) do
    chunk_size = params.client.chunk_size
    new_offset = params.offset + 1
    size_uploaded = Enum.min([new_offset * chunk_size + chunk_size, params.size])

    params.on_progress(%{
      id: response["$id"],
      progress: get_size(new_offset, chunk_size, params.size),
      size_uploaded: size_uploaded,
      chunks_total: response["chunksTotal"],
      chunks_uploaded: response["chunksUploaded"]
    })
  end

  defp set_appwrite_id_header(headers, nil), do: headers
  defp set_appwrite_id_header(headers, id), do: Map.put(headers, "x-appwrite-id", id)

  defp get_size(offset, chunk_size, size) do
    Enum.min([
      offset * chunk_size,
      size
    ])
  end

  defp flatten(data, options \\ [])

  defp flatten(data, options) when is_map(data) do
    data
    |> Enum.flat_map(fn x -> flatten(x, options) end)
  end

  defp flatten(data, options) when is_list(data) do
    data
    |> Enum.with_index
    |> Enum.flat_map(fn {x, i} -> flatten({i, x}, options) end)
  end

  defp flatten({key, value}, options) when is_list(value) or is_map(value) do
    flatten(value, Keyword.get_and_update(options, :prefix, fn
      nil -> {nil, "#{key}"}
      prefix -> {prefix, "#{prefix}[#{key}]"}
    end) |> elem(1))
  end

  defp flatten({key, value}, options) do
    if prefix = Keyword.get(options, :prefix) do
      [{"#{prefix}[#{key}]", value}]
    else
      [{"#{key}", value}]
    end
  end
end
