        {%~ for parameter in method.parameters.all %}
        {%~ if parameter.type == 'file' %}
        $size = ${{ parameter.name | caseCamel }}->size;

        if ($size <= Client::CHUNK_SIZE) {
            return $this->client->call(Client::METHOD_POST, $apiPath, [
                {%~ for param in method.parameters.header %}
                '{{ param.name }}' => ${{ param.name | caseCamel }},
                {%~ endfor %}
                {%~ for key, header in method.headers %}
                '{{ key }}' => '{{ header }}',
                {%~ endfor %}
            ], $apiParams);
        }

        $id = '';
        $counter = 0;

        {%~ for parameter in method.parameters.all %}
        {%~ if parameter.isUploadID %}
        if(${{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
            try {
                $response = $this->client->call(Client::METHOD_GET, $apiPath . '/' . ${{ parameter.name }});
                $counter = $response['chunksUploaded'] ?? 0;
            } catch(\Exception $e) {
            }
        }
        {%~ endif %}
        {%~ endfor %}

        $apiHeaders = ['content-type' => 'multipart/form-data'];

        $start = $counter * Client::CHUNK_SIZE;
        while ($start < $size) {
            
            $apiParams['{{ parameter.name }}'] = Payload::fromBinary(
                ${{ parameter.name | caseCamel | escapeKeyword }}->toBinary($start, Client::CHUNK_SIZE),
                ${{ parameter.name | caseCamel | escapeKeyword }}->filename,
                ${{ parameter.name | caseCamel | escapeKeyword }}->mimeType
            );

            $apiHeaders['content-range'] = 'bytes ' . ($counter * Client::CHUNK_SIZE) . '-' . min(((($counter * Client::CHUNK_SIZE) + Client::CHUNK_SIZE) - 1), $size - 1) . '/' . $size;
            if(!empty($id)) {
                $apiHeaders['x-{{spec.title | caseLower }}-id'] = $id;
            }
            $response = $this->client->call(Client::METHOD_POST, $apiPath, $apiHeaders, $apiParams);
            $counter++;
            $start += Client::CHUNK_SIZE;
            if(empty($id)) {
                $id = $response['$id'];
            }
            if($onProgress !== null) {
                $onProgress([
                    '$id' => $response['$id'],
                    'progress' => min(((($counter * Client::CHUNK_SIZE) + Client::CHUNK_SIZE)), $size) / $size * 100,
                    'sizeUploaded' => min($counter * Client::CHUNK_SIZE),
                    'chunksTotal' => $response['chunksTotal'],
                    'chunksUploaded' => $response['chunksUploaded'],
                ]);
            }
        }
        return $response;
        {%~ endif %}
        {%~ endfor %}
