part of {{ language.params.packageName }};

{% macro parameter(parameter) %}
{% if parameter.required %}required {{ parameter.type | typeName }}{% else %}{{ parameter.type | typeName }}?{% endif %} {{ parameter.name | caseCamel | escapeKeyword }}{% endmacro %}
{% macro method_parameters(parameters) %}
{% if parameters.all|length > 0 %}{{ '{' }}{% for parameter in parameters.all %}{{ _self.parameter(parameter) }}{% if not loop.last %}, {% endif %}{% endfor %}{{ '}' }}{% endif %}
{% endmacro %}
{% macro map_parameter(parameter) %}
{% if parameter.name == 'file' %}'{{ parameter.name }}': {{ parameter.name | caseCamel }}._multipartFile,{% else %}
'{{ parameter.name }}': {{ parameter.name | caseCamel | escapeKeyword }},{% endif %}
{% endmacro %}

class {{ service.name | caseUcfirst }} extends Service {
    {{ service.name | caseUcfirst }}(Client client): super(client);
{% for method in service.methods %}

     /// {{ method.title }}
{% if method.description %}
     ///
{{ method.description|dartComment }}
     ///
{% endif %}
    {% if method.type == 'webAuth' %}Future{% elseif method.type == 'location' %} Future<Uint8List> {% else %} {% if method.responseModel and method.responseModel != 'any' %}Future<{{method.responseModel | caseUcfirst}}Model>{% else %}Future{% endif %}{% endif %} {{ method.name | caseCamel }}({{ _self.method_parameters(method.parameters) }}) async {
        final String path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replaceAll(RegExp('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}'), {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};

        final Map<String, dynamic> params = {
{% for parameter in method.parameters.query %}
            {{ _self.map_parameter(parameter) }}
{% endfor %}
{% for parameter in method.parameters.body %}
            {{ _self.map_parameter(parameter) }}
{% endfor %}
{% if method.type == 'webAuth' or method.type == 'location' %}
{% if method.security|length > 0 %}
{% for node in method.security %}
{% for key,header in node|keys %}
            '{{header|caseLower}}': client.config['{{header|caseLower}}'],
{% endfor %}
{% endfor %}
{% endif %}
{% endif %}
        };

{% if method.type == 'webAuth' %}

        final List query = [];

        params.forEach((key, value) {
          if (value is List) { 
            for (var item in value) {
              query.add(Uri.encodeComponent(key + '[]') + '=' + Uri.encodeComponent(item));
            }
          } else if(value != null) {
              query.add(Uri.encodeComponent(key) + '=' + Uri.encodeComponent(value));
          }
        });

        Uri endpoint = Uri.parse(client.endPoint);
        Uri url = new Uri(scheme: endpoint.scheme,
          host: endpoint.host,
          port: endpoint.port,
          path: endpoint.path + path,
          query: query.join('&')
        );

        if(kIsWeb) {
          html.window.location.href = url.toString();
          return Future.value();
        }else{

          return FlutterWebAuth.authenticate(
            url: url.toString(),
            callbackUrlScheme: "appwrite-callback-" + client.config['project']!
            ).then((value) async {
                Uri url = Uri.parse(value);
                Cookie cookie = new Cookie(url.queryParameters['key']!, url.queryParameters['secret']!);
                cookie.domain = Uri.parse(client.endPoint).host;
                cookie.httpOnly = true;
                cookie.path = '/';
                List<Cookie> cookies = [cookie];
                await client.init();
                await client.cookieJar.saveFromResponse(Uri.parse(client.endPoint), cookies);
            });
        }

{% elseif method.type == 'location' %}
        params.keys.forEach((key) {if (params[key] is int || params[key] is double) {
          params[key] = params[key].toString();
        }});

        final res = await client.call(HttpMethod.{{ method.method | caseLower }}, path: path, params: params, responseType: ResponseType.bytes);
        return res.data;
{% else %}
        final Map<String, String> headers = {
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        };

        final res = await client.call(HttpMethod.{{ method.method | caseLower }}, path: path, params: params, headers: headers);
        return {% if method.responseModel and method.responseModel != 'any' %}{{method.responseModel | caseUcfirst}}Model.fromMap(res.data){% else %} res.data{% endif %};
{% endif %}
    }
{% endfor %}
}