const Service = require('../service.js');
const {{spec.title | caseUcfirst}}Exception = require('../exception.js');
const InputFile = require('../inputFile.js');
const client = require('../client.js');
const Stream = require('stream');
const { promisify } = require('util');
const fs = require('fs');
const { File } = require('undici');
const Query = require('../query.js');

class {{ service.name | caseUcfirst }} extends Service {

     constructor(client)
     {
        super(client);
     }

{% for method in service.methods %}

    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ '{' }}{{ parameter | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
     * @param {CallableFunction} onProgress
{% endif %}
     * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
     * @returns {Promise}
     */
    async {{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = () => {}{% endif %}) {
        const apiPath = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
{{ include ('node/base/params.twig')}}
{% if 'multipart/form-data' in method.consumes %}
{{ include ('node/base/requests/file.twig')}}
{% else %}
{{ include('node/base/requests/api.twig') }}
{% endif %}
    }
{% endfor %}
}

module.exports = {{ service.name | caseUcfirst }};
