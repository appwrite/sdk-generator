package {{ sdk.namespace | caseDot }}

import android.content.Context
import android.content.Intent
import android.net.Uri
import androidx.browser.customtabs.CustomTabsIntent
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import kotlinx.coroutines.delay
import kotlin.collections.component1
import kotlin.collections.component2
import kotlin.collections.forEach
import kotlin.collections.mutableMapOf
import kotlin.collections.set

/**
 * Used to authenticate with external OAuth2 providers. Launches browser windows and handles
 * suspension until the user completes the process or otherwise returns to the app.
 */
actual class WebAuthComponent(private val context: Context) {

    companion object : DefaultLifecycleObserver {
        private var suspended = false
        private val callbacks = mutableMapOf<String, (((Result<String>) -> Unit)?)>()

        override fun onResume(owner: LifecycleOwner) {
            suspended = false
        }

        suspend fun authenticate(
            context: Context,
            url: String,
            callbackUrlScheme: String,
            onComplete: ((Result<String>) -> Unit)?
        ) {
            val intent = CustomTabsIntent.Builder().build()
            val keepAliveIntent = Intent(context, KeepAliveService::class.java)

            callbacks[callbackUrlScheme] = onComplete

            intent.intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)
            intent.intent.putExtra("android.support.customtabs.extra.KEEP_ALIVE", keepAliveIntent)
            intent.launchUrl(context, Uri.parse(url))

            // Dirty poll block so execution doesn't continue at the callsite of this function
            suspended = true
            while (suspended) {
                delay(200)
            }
            cleanUp()
        }

        
        fun onCallback(scheme: String, url: String) {
            callbacks.remove(scheme)?.invoke(
                Result.success(url)
            )
            suspended = false
        }

        private fun cleanUp() {
            callbacks.forEach { (_, danglingResultCallback) ->
                danglingResultCallback?.invoke(
                    Result.failure(IllegalStateException("User cancelled login"))
                )
            }
            callbacks.clear()
        }
    }

    @Throws(Throwable::class)
    actual suspend fun authenticate(
        url: String,
        callbackUrlScheme: String,
        onComplete: ((Result<String>) -> Unit)?
    ) {
        authenticate(
            context,
            url,
            callbackUrlScheme,
            onComplete,
        )
    }

    actual fun onCallback(scheme: String, url: String) {
        WebAuthComponent.onCallback(scheme, url)
    }
}
