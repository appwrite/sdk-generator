const Service = require('../service.js');
const {{spec.title | caseUcfirst}}Exception = require('../exception.js');
const InputFile = require('../inputFile.js');
const client = require('../client.js');
const Stream = require('stream');
const { promisify } = require('util');
const fs = require('fs');

class {{ service.name | caseUcfirst }} extends Service {
{% if service.globalParams | length %}
{% for parameter in service.globalParams %}
    {{ parameter.name | caseCamel | escapeKeyword }};
    /**
     * Set {{ parameter.name }}.
     *
     * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
     *
     * @return void
     */
     set{{ parameter.name | caseUcfirst | escapeKeyword }}({{ parameter.name | caseCamel | escapeKeyword }})
     {
        this.{{ parameter.name | caseCamel | escapeKeyword }} = {{ parameter.name | caseCamel | escapeKeyword }};
     }
    /**
     * Get {{ parameter.name }}.
     *
     * @return {{ parameter.type | typeName }}
     */
     get{{ parameter.name | caseUcfirst | escapeKeyword }}()
     {
        return this.{{ parameter.name | caseCamel | escapeKeyword }};
     }
{% endfor %}
     constructor(client, {% for parameter in service.globalParams %} {{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %} = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %})
     {
        super(client);

{% for parameter in service.globalParams %}
        this.{{ parameter.name | caseCamel | escapeKeyword }} = {{ parameter.name | caseCamel | escapeKeyword }};
{% endfor %}
     }
{% endif %}
{% for method in service.methods %}

    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all | filter((param) => not param.isGlobal) %}
     * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
     * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
     * @returns {Promise}
     */
    async {{ method.name | caseCamel }}({% for parameter in method.parameters.all | filter((param) => not param.isGlobal) %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = () => {}{% endif %}) {
{% for parameter in method.parameters.all | filter((param) => not param.isGlobal) %}
{% if parameter.required %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
        }

{% endif %}
{% endfor %}
        let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}', {% if parameter.isGlobal %}this.{% endif %}{{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
        let payload = {};
{% for parameter in method.parameters.query %}

        if (typeof {% if parameter.isGlobal %}this.{% endif %}{{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {% if parameter.isGlobal %}this.{% endif %}{{ parameter.name | caseCamel | escapeKeyword }}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" and parameter.type != "file" ) %}.toString(){% endif %};
        }
{% endfor %}
{% for parameter in method.parameters.body %}

        if (typeof {% if parameter.isGlobal %}this.{% endif %}{{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {% if parameter.isGlobal %}this.{% endif %}{{ parameter.name | caseCamel | escapeKeyword}}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" and parameter.type != "file" ) %}.toString(){% endif %};
        }
{% endfor %}

{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
        const size = {{ parameter.name | caseCamel | escapeKeyword }}.size;

        const headers = {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        };

        let id = undefined;
        let response = undefined;

        let chunksUploaded = 0;

{% for parameter in method.parameters.all %}
{% if parameter.isUploadID %}
        if({{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
            try {
                response = await this.client.call('get', path + '/' + {{ parameter.name }}, headers);
                chunksUploaded = response.chunksUploaded;
            } catch(e) {
            }
        }
{% endif %}
{% endfor %}

        let currentChunk = Buffer.from('');
        let currentChunkSize = 0;
        let currentChunkStart = 0;

        const selfClient = this.client;

        async function uploadChunk(lastUpload = false) {
            if(chunksUploaded - 1 >= currentChunkStart / client.CHUNK_SIZE) {
                return;
            }
            
            const start = currentChunkStart;
            const end = Math.min(((start + client.CHUNK_SIZE) - 1), size);

            if(!lastUpload || currentChunkStart !== 0) {
                headers['content-range'] = 'bytes ' + start + '-' + end + '/' + size;
            }

            if (id) {
                headers['x-{{spec.title | caseLower }}-id'] = id;
            }

            const stream = Stream.Readable.from(currentChunk);
            payload['{{ parameter.name }}'] = { type: 'file', file: stream, filename: {{ parameter.name }}.filename };

            response = await selfClient.call('{{ method.method | caseLower }}', path, headers, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});

            if (!id) {
                id = response['$id'];
            }
            
            if (onProgress !== null) {
                onProgress({
                    $id: response['$id'],
                    progress: Math.min((start+client.CHUNK_SIZE) * client.CHUNK_SIZE, size) / size * 100,
                    sizeUploaded: end+1,
                    chunksTotal: response['chunksTotal'],
                    chunksUploaded: response['chunksUploaded']
                });
            }

            currentChunkStart += client.CHUNK_SIZE;
        }

        return await new Promise((resolve, reject) => {
            const writeStream = new Stream.Writable();
            writeStream._write = async (mainChunk, encoding, next) => {
                // Segment incoming chunk into up to 5MB chunks
                const mainChunkSize = Buffer.byteLength(mainChunk);
                const chunksCount = Math.ceil(mainChunkSize / client.CHUNK_SIZE);
                const chunks = [];

                for(let i = 0; i < chunksCount; i++) {
                    const chunk = mainChunk.slice(i * client.CHUNK_SIZE, client.CHUNK_SIZE);
                    chunks.push(chunk);
                }

                for (const chunk of chunks) {
                    const chunkSize = Buffer.byteLength(chunk);

                    if(chunkSize + currentChunkSize == client.CHUNK_SIZE) {
                        // Upload chunk
                        currentChunk = Buffer.concat([currentChunk, chunk]);
                        await uploadChunk();
                        currentChunk = Buffer.from('');
                        currentChunkSize = 0;
                    } else if(chunkSize + currentChunkSize > client.CHUNK_SIZE) {
                        // Upload chunk, put rest into next chunk
                        const bytesToUpload = client.CHUNK_SIZE - currentChunkSize;
                        const newChunkSection = chunk.slice(0, bytesToUpload);
                        currentChunk = Buffer.concat([currentChunk, newChunkSection]);
                        currentChunkSize = Buffer.byteLength(currentChunk);
                        await uploadChunk();
                        currentChunk = chunk.slice(bytesToUpload, undefined);
                        currentChunkSize = chunkSize - bytesToUpload;
                    } else {
                        // Append into current chunk
                        currentChunk = Buffer.concat([currentChunk, chunk]);
                        currentChunkSize = chunkSize + currentChunkSize;
                    }
                }

                next();
            }

            writeStream.on("finish", async () => {
                if(currentChunkSize > 0) {
                    await uploadChunk(true);
                }
                
                resolve(response);
            });

            writeStream.on("error", (err) => {
                reject(err);
            });
            
            {{ parameter.name | caseCamel | escapeKeyword }}.stream.pipe(writeStream);
        });
{% endif %}
{% endfor %}
{% else %}
        return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});
{% endif %}
    }
{% endfor %}
}

module.exports = {{ service.name | caseUcfirst }};