import { {{ spec.title | caseUcfirst}}Exception, Client, type Payload, UploadProgress } from '../client';
import type { Models } from '../models';
{% set added = [] %}
{% for method in service.methods %}
{% for parameter in method.parameters.all %}
{% if parameter.enumValues is not empty %}
{% if parameter.enumName is not empty %}
{% set name = parameter.enumName %}
{% else %}
{% set name = parameter.name %}
{% endif %}
{% if name not in added %}
import { {{ name | caseUcfirst }} } from '../enums/{{ name | caseDash }}';
{% set added = added|merge([name]) %}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}

export class {{ service.name | caseUcfirst }} {
    client: Client;

    constructor(client: Client) {
        this.client = client;
    }

    {%~ for method in service.methods %}
    /**
    {%~ if method.description %}
     * {{ method.description | replace({'\n': '\n     * '}) | raw }}
    {%~ endif %}
     *
    {%~ for parameter in method.parameters.all %}
     * @param {{ '{' }}{{ parameter | getPropertyType(method) | raw }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }} - {{ parameter.description | raw }}
    {%~ endfor %}
     * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
     * @returns {{ '{' }}{{ method | getReturn(spec) | raw }}{{ '}' }}
    {%~ if method.deprecated %}
    {%~ if method.since and method.replaceWith %}
     * @deprecated This API has been deprecated since {{ method.since }}. Please use `{{ method.replaceWith | capitalizeFirst }}` instead.
    {%~ else %}
     * @deprecated This API has been deprecated.
    {%~ endif %}
    {%~ endif %}
     */
    {%~ if method.parameters.all|length > 0 %}
    {{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}(params: { {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %} {% if 'multipart/form-data' in method.consumes %}, onProgress?: (progress: UploadProgress) => {}{% endif %} }): {{ method | getReturn(spec) | raw }};
    /**
     * @deprecated This API has been deprecated.
     */
    {{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress?: (progress: UploadProgress) => {}{% endif %}): {{ method | getReturn(spec) | raw }};
    {{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}(
        {% if method.parameters.all|length > 0 %}paramsOrFirst{% if not method.parameters.all[0].required or method.parameters.all[0].nullable %}?{% endif %}: { {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress?: (progress: UploadProgress) => {} {% endif %} } | {{ method.parameters.all[0] | getPropertyType(method) | raw }}{% if method.parameters.all|length > 1 %},
        ...rest: [{% for parameter in method.parameters.all[1:] %}({{ parameter | getPropertyType(method) | raw }})?{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %},((progress: UploadProgress) => {})?{% endif %}]{% endif %}{% endif %}
    
    ): {{ method | getReturn(spec) | raw }} {
        {%~ if method.parameters.all|length > 0 %}
        let params: { {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %} };
        {%~ if 'multipart/form-data' in method.consumes %}
        let onProgress: ((progress: UploadProgress) => {});
        {%~ endif %}
        
        if (paramsOrFirst && typeof paramsOrFirst === 'object' && !Array.isArray(paramsOrFirst)) {
            params = paramsOrFirst as { {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %} };
            {%~ if 'multipart/form-data' in method.consumes %}
            onProgress = paramsOrFirst.onProgress as ((progress: UploadProgress) => {});
            {%~ endif %}
        } else {
            params = {
                {%~ for parameter in method.parameters.all %}
                {{ parameter.name | caseCamel | escapeKeyword }}: {% if loop.index0 == 0 %}paramsOrFirst{% else %}rest[{{ loop.index0 - 1 }}]{% endif %} as {{ parameter | getPropertyType(method) | raw }}{% if not parameter.required or parameter.nullable %} | undefined{% endif %}{% if not loop.last %},
{% endif %}
                {%~ endfor %}
            
            };
            {%~ if 'multipart/form-data' in method.consumes %}
            onProgress = rest[{{ method.parameters.all|length - 1 }}] as ((progress: UploadProgress) => {});
            {%~ endif %}
        }
        
        {%~ for parameter in method.parameters.all %}
        const {{ parameter.name | caseCamel | escapeKeyword }} = params.{{ parameter.name | caseCamel | escapeKeyword }};
        {%~ endfor %}

        {%~ else %}
        {%~ if 'multipart/form-data' in method.consumes %}
        if (typeof paramsOrFirst === 'function') {
            onProgress = paramsOrFirst;
        }
        {%~ endif %}
        {%~ endif %}
    {%~ else %}
    {{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = (progress: UploadProgress) => {}{% endif %}): {{ method | getReturn(spec) | raw }} {
    {%~ endif %}
        {%~ for parameter in method.parameters.all %}
        {%~ if parameter.required %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
        }
        {%~ endif %}
        {%~ endfor %}
        const apiPath = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
        const payload: Payload = {};
        {%~ for parameter in method.parameters.query %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }};
        }
        {%~ endfor %}
        {%~ for parameter in method.parameters.body %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }};
        }
        {%~ endfor %}
        const uri = new URL(this.client.config.endpoint + apiPath);

        const apiHeaders: { [header: string]: string } = {
            {%~ for parameter in method.parameters.header %}
            '{{ parameter.name | caseCamel | escapeKeyword }}': this.client.${{ parameter.name | caseCamel | escapeKeyword }},
            {%~ endfor %}
            {%~ for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
            {%~ endfor %}
        }

        {%~ if method.type == 'webAuth' %}
        return this.client.redirect(
            '{{ method.method | caseLower }}',
            uri,
            apiHeaders,
            payload
        );
        {%~ elseif 'multipart/form-data' in method.consumes %}
        return this.client.chunkedUpload(
            '{{ method.method | caseLower }}',
            uri,
            apiHeaders,
            payload,
            onProgress
        );
        {%~ else %}
        return this.client.call(
            '{{ method.method | caseLower }}',
            uri,
            apiHeaders,
            payload,
            {%~ if method.type == 'location' %}
            'arrayBuffer'
            {%~ endif %}
        );
        {%~ endif %}
    }
{%~ if not loop.last %}

{%~ endif %}
    {%~ endfor %}
}
