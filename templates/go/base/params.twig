{% if method.parameters.all|filter(v => not v.required)|length > 0 %}
	options := {{(method.name ~ "Options") | caseUcfirst}}{}.New()
	for _, opt := range optionalSetters {
		opt(options)
	}
{% endif %}
	params := map[string]interface{}{}
{% for parameter in method.parameters.all %}
{% if parameter.required %}
	{%~ if parameter.type == "payload" %}
	if Body.Path != "" {
		file, err := os.ReadFile(Body.Path)
		if err != nil {
			return nil, err
		}
		params["body"] = string(file)
	} else {
		params["body"] = string(Body.Data)
	}
	{%~ else %}
	params["{{ parameter.name }}"] = {{ parameter.name | caseUcfirst }}
	{%~ endif %}
{% else %}
	if options.enabledSetters["{{ parameter.name | caseUcfirst}}"] {
	{%~ if parameter.type == "payload" %}
		params["{{ parameter.name }}"] = string(options.{{ parameter.name | caseUcfirst }}.Data)
	{%~ else %}
		params["{{ parameter.name }}"] = options.{{ parameter.name | caseUcfirst }}
	{%~ endif %}
	}
{% endif %}
{% endfor %}
	headers := map[string]interface{}{
{% for key, header in method.headers %}
		"{{ key }}": "{{ header }}",
{% endfor %}
	}
