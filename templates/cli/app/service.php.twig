<?php

namespace {{ spec.title | caseUcfirst }}\Services;

require_once './vendor/autoload.php';

use Exception;
use {{ spec.title | caseUcfirst }}\Client;
use {{ spec.title | caseUcfirst }}\Parser;
use Utopia\CLI\CLI;
use Utopia\CLI\Console;
use Utopia\Validator\Wildcard;

$parser = new Parser();
$cli = new CLI();

$cli->
      init(function() use ($cli, $parser) {
        
        if (array_key_exists('help', $cli->getArgs())) {
            $taskName = $cli->match()->getName();
            $task = $cli->getTasks()[$taskName];
            $description = $task->getLabel('description', '');
            $params = $task->getParams();

            Console::log("\e[0;31;m {{ language.params.logo | raw }} \e[0m") ;
            Console::log("\nUsage : {{ language.params.executableName }} {{ service.name }} {$taskName} --[OPTIONS] \n");
            Console::log($description);
            Console::log("Options:");
            array_walk($params, function(&$key) {
                $key = $key['description'];
            });
            $parser->formatArray($params);
            Console::exit(0);
        }
      });

{% for method in service.methods %}
$cli
    ->task('{{ method.name | caseCamel }}')
    ->label('description', "{{ method.description | replace({'"':'\''}) | raw }}\n\n")
{% for parameter in method.parameters.all %}
    ->param('{{ parameter.name | escapeKeyword }}', {{ parameter | paramDefault }} , new Wildcard() , '{{ parameter.description}}', {% if not parameter.required %} true{% else %} false{% endif %})
{% endfor %}
    ->action(function ({% for parameter in method.parameters.all %} ${{ parameter.name | escapeKeyword }}{% if not loop.last %},{% endif %}{% endfor %} ) use ($parser) {
{% for parameter in method.parameters.all %}
        /** @var {{ parameter.type }} ${{ parameter.name | escapeKeyword }} */
{% endfor %}

        $client = new Client();
        $path   = str_replace([{% for parameter in method.parameters.path %}'{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}'{% if not loop.last %}, {% endif %}{% endfor %}], [{% for parameter in method.parameters.path %}${{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last %}, {% endif %}{% endfor %}], '{{ method.path }}');
        $params = [];
{% if method.parameters.query|length > 0 %}
        /** Query Params */
{% endif %}
{% for parameter in method.parameters.query %}
        $params['{{ parameter.name }}'] = {% if parameter.type == 'array' %}!is_array(${{ parameter.name | caseCamel | escapeKeyword }}) ? array(${{ parameter.name | caseCamel | escapeKeyword }}) : ${{ parameter.name | caseCamel | escapeKeyword }};{% else %}${{ parameter.name | caseCamel | escapeKeyword }};{% endif %}

{% endfor %}
{% if method.parameters.body|length > 0 %}
        /** Body Params */
{% endif %}
{% for parameter in method.parameters.body %}
{% if parameter.type == 'file' and method.packaging %}
        ${{ parameter.name | caseCamel | escapeKeyword }} = \urldecode(${{ parameter.name | caseCamel | escapeKeyword }});
        $cloudFunctionPath = realpath(__DIR__.'/../files/'.${{ parameter.name | caseCamel | escapeKeyword }});
        $cloudFunctionParentDir = escapeshellarg(dirname($cloudFunctionPath, 1));
        $cloudFunctionDirName = escapeshellarg(basename($cloudFunctionPath));
        if (file_exists($cloudFunctionPath) === false ) {
            throw new Exception("Path doesn't exist. Please ensure that the path is within the current directory. "); 
        }
        $archiveName = 'code.tar.gz';
        $volumeMountPoint = realpath(__DIR__.'/../files/');
        exec("tar -zcvf $archiveName -C $cloudFunctionParentDir $cloudFunctionDirName && mv $archiveName $volumeMountPoint");
        $archivePath = realpath($volumeMountPoint."/$archiveName");
        $cFile = new \CURLFile($archivePath,  'application/x-gzip' , basename($archivePath));
        $params['{{ parameter.name | escapeKeyword }}'] = $cFile;
{% elseif parameter.type == 'file' %}
        ${{ parameter.name | caseCamel | escapeKeyword }} = realpath(__DIR__.'/../files/'.\urldecode(${{ parameter.name | caseCamel | escapeKeyword }}));
        if (file_exists(${{ parameter.name | caseCamel | escapeKeyword }}) === false ) {
            throw new Exception("Path doesn't exist. Please ensure that the path is within the current directory. "); 
        }
        $cFile = new \CURLFile(${{ parameter.name | caseCamel | escapeKeyword }}, {% if method.packaging %} 'application/x-gzip' {% else %} 'image/png' {% endif %}, basename(${{ parameter.name | caseCamel | escapeKeyword }}));
        $params['{{ parameter.name }}'] = $cFile;
{% else %}
        $params['{{ parameter.name }}'] = {% if parameter.type == 'array' %}!is_array(${{ parameter.name | caseCamel | escapeKeyword }}) ? array(${{ parameter.name | caseCamel | escapeKeyword }}) : ${{ parameter.name | caseCamel | escapeKeyword }};{% elseif parameter.type == 'integer' %}(int)${{ parameter.name | caseCamel | escapeKeyword }};{% else %}${{ parameter.name | caseCamel | escapeKeyword }};{% endif %}

{% endif %}
{% endfor %}
{% if method.parameters.formData|length > 0 %}
        /** Form Data Params */
{% endif %}
{% for parameter in method.parameters.formData %}
        $params['{{ parameter.name }}'] = {% if parameter.type == 'array' %}!is_array(${{ parameter.name | caseCamel | escapeKeyword }}) ? array(${{ parameter.name | caseCamel | escapeKeyword }}) : ${{ parameter.name | caseCamel | escapeKeyword }};{% elseif parameter.type == 'integer' %}(int)${{ parameter.name | caseCamel | escapeKeyword }};{% else %}${{ parameter.name | caseCamel | escapeKeyword }};{% endif %}

{% endfor %}
{% if method.type == 'location' %}
        $params['project'] = $client->getPreference('X-Appwrite-Project');
        $params['key'] = $client->getPreference('X-Appwrite-Key');
        $path = $client->getPreference(Client::PREFERENCE_ENDPOINT).$path . "?" . http_build_query($params);
        Console::success($path);
{% else %}
        $response =  $client->call(Client::METHOD_{{ method.method | caseUpper }}, $path, [
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}' => ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}' => '{{ header }}',
{% endfor %}
        ], $params);
        $parser->parseResponse($response);
{% endif %}
{% if method.packaging %}
        unlink($archivePath);
{% endif %}
    });

{% endfor %}

$cli
    ->task('help')
    ->action(function() use ($parser) {
        Console::log("\e[0;31;m {{ language.params.logo | raw }} \e[0m");
        Console::log("\nUsage : {{ language.params.executableName }} {{ service.name }} [COMMAND]\n");
        Console::log("Commands :");
        $commands = [
{% for method in service.methods %}
                "{{ method.name | caseCamel }}" => "{{ method.description | replace({'"':'\''}) | raw }}",
{% endfor %}
        ];
        $parser->formatArray($commands);
        Console::log("\nRun '{{ language.params.executableName }} {{ service.name }} COMMAND --help' for more information on a command.");
    });


$cli->run();
