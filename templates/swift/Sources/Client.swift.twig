import NIO
import NIOCore
import NIOFoundationCompat
import NIOSSL
import Foundation
import AsyncHTTPClient
@_exported import {{spec.title | caseUcfirst}}Models

let DASHDASH = "--"
let CRLF = "\r\n"

open class Client {

    // MARK: Properties

    open var endPoint = "{{spec.endpoint}}"

    open var endPointRealtime: String? = nil

    open var headers: [String: String] = [
        "content-type": "",
        "x-sdk-version": "{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}"{% if spec.global.defaultHeaders | length > 0 %},{% endif %}
{% for key,header in spec.global.defaultHeaders %}
        "{{key}}": "{{header}}"{% if not loop.last %},{% endif %}
{% endfor %}

    ]

    open var config: [String: String] = [:]

    open var http: HTTPClient

    private static let boundaryChars =
        "abcdefghijklmnopqrstuvwxyz1234567890"

    private static var eventLoopGroupProvider =
        HTTPClient.EventLoopGroupProvider.createNew

    // MARK: Methods

    public init() {
        http = Client.createHTTP()

        #if os(macOS) || os(iOS) || os(tvOS) || os(watchOS)
        addUserAgent()
        #endif
    }

    private static func createHTTP(
        selfSigned: Bool = false,
        maxRedirects: Int = 5,
        alloweRedirectCycles: Bool = false,
        connectTimeout: TimeAmount = .seconds(30),
        readTimeout: TimeAmount = .seconds(30)
    ) -> HTTPClient {
        let timeout = HTTPClient.Configuration.Timeout(
            connect: connectTimeout,
            read: readTimeout
        )
        let redirect = HTTPClient.Configuration.RedirectConfiguration.follow(
            max: 5,
            allowCycles: false
        )
        var tls = TLSConfiguration
            .makeClientConfiguration()

        if selfSigned {
            tls.certificateVerification = .none
        }

        return HTTPClient(
            eventLoopGroupProvider: eventLoopGroupProvider,
            configuration: HTTPClient.Configuration(
                tlsConfiguration: tls,
                redirectConfiguration: redirect,
                timeout: timeout,
                decompression: .enabled(limit: .none)
            )
        )

    }

    deinit {
        do {
            try http.syncShutdown()
        } catch {
            print(error)
        }
    }

{% for header in spec.global.headers %}
    ///
    /// Set {{header.key | caseUcfirst}}
    ///
{% if header.description %}
    /// {{header.description}}
    ///
{% endif %}
    /// @param String value
    ///
    /// @return Client
    ///
    open func set{{ header.key | caseUcfirst }}(_ value: String) -> Client {
        config["{{ header.key | caseLower }}"] = value
        _ = addHeader(key: "{{header.name}}", value: value)
        return self
    }

{% endfor %}

    ///
    /// Set self signed
    ///
    /// @param Bool status
    ///
    /// @return Client
    ///
    open func setSelfSigned(_ status: Bool = true) -> Client {
        try! http.syncShutdown()
        http = Client.createHTTP(selfSigned: status)
        return self
    }

    ///
    /// Set endpoint
    ///
    /// @param String endPoint
    ///
    /// @return Client
    ///
    open func setEndpoint(_ endPoint: String) -> Client {
        self.endPoint = endPoint

        if (self.endPointRealtime == nil && endPoint.starts(with: "http")) {
            self.endPointRealtime = endPoint
                .replacingOccurrences(of: "http://", with: "ws://")
                .replacingOccurrences(of: "https://", with: "wss://")
        }

        return self
    }

    ///
    /// Set realtime endpoint.
    ///
    /// @param String endPoint
    ///
    /// @return Client
    ///
    open func setEndpointRealtime(_ endPoint: String) -> Client {
        self.endPointRealtime = endPoint

        return self
    }

    ///
    /// Add header
    ///
    /// @param String key
    /// @param String value
    ///
    /// @return Client
    ///
    open func addHeader(key: String, value: String) -> Client {
        self.headers[key] = value
        return self
    }

   ///
   /// Builds a query string from parameters
   ///
   /// @param Dictionary<String, Any?> params
   /// @param String prefix
   ///
   /// @return String
   ///
   open func parametersToQueryString(params: [String: Any?]) -> String {
       var output: String = ""

       func appendWhenNotLast(_ index: Int, ofTotal count: Int, outerIndex: Int? = nil, outerCount: Int? = nil) {
           if (index != count - 1 || (outerIndex != nil
               && outerCount != nil
               && index == count - 1
               && outerIndex! != outerCount! - 1)) {
               output += "&"
           }
       }

       for (parameterIndex, element) in params.enumerated() {
           switch element.value {
           case nil:
               break
           case is Array<Any?>:
               let list = element.value as! Array<Any?>
               for (nestedIndex, item) in list.enumerated() {
                   output += "\(element.key)[]=\(item!)"
                   appendWhenNotLast(nestedIndex, ofTotal: list.count, outerIndex: parameterIndex, outerCount: params.count)
               }
               appendWhenNotLast(parameterIndex, ofTotal: params.count)
           default:
               output += "\(element.key)=\(element.value!)"
               appendWhenNotLast(parameterIndex, ofTotal: params.count)
           }
       }

       return output.addingPercentEncoding(
           withAllowedCharacters: .urlHostAllowed
       ) ?? ""
   }

    ///
    /// Make an API call
    ///
    /// @param String method
    /// @param String path
    /// @param Dictionary<String, Any?> params
    /// @param Dictionary<String, String> headers
    /// @return Response
    /// @throws Exception
    ///
    open func call<T>(
        method: String,
        path: String = "",
        headers: [String: String] = [:],
        params: [String: Any?] = [:],
        sink: ((ByteBuffer) -> Void)? = nil,
        convert: (([String: Any]) -> T)? = nil,
        completion: ((Result<T, {{ spec.title | caseUcfirst }}Error>) -> Void)? = nil
    ) {
        self.headers.merge(headers) { (_, new) in
            new
        }

        let validParams = params.filter { $0.value != nil }

        let queryParameters = method == "GET" && !validParams.isEmpty
            ? "?" + parametersToQueryString(params: validParams)
            : ""

        let targetURL = URL(string: endPoint + path + queryParameters)!

        var request: HTTPClient.Request
        do {
            request = try HTTPClient.Request(
                url: targetURL,
                method: .RAW(value: method)
            )
        } catch {
            completion?(Result.failure({{ spec.title | caseUcfirst }}Error(message: error.localizedDescription)))
            return
        }

        addHeaders(to: &request)
        request.addDomainCookies()

        if "GET" == method {
            execute(request, convert: convert, completion: completion)
            return
        }

        do {
            try buildBody(for: &request, with: validParams)
        } catch let error {
            completion?(Result.failure({{ spec.title | caseUcfirst}}Error(message: error.localizedDescription)))
            return
        }

        execute(request, withSink: sink, convert: convert, completion: completion)
    }

    private func addHeaders(to request: inout HTTPClient.Request) {
        for (key, value) in self.headers {
            request.headers.add(name: key, value: value)
        }
    }

    private func buildBody(
        for request: inout HTTPClient.Request,
        with params: [String: Any?]
    ) throws {
        if request.headers["content-type"][0] == "multipart/form-data" {
            buildMultipart(&request, with: params)
        } else {
            try buildJSON(&request, with: params)
        }
    }

    private func execute<T>(
        _ request: HTTPClient.Request,
        withSink bufferSink: ((ByteBuffer) -> Void)? = nil,
        convert: (([String: Any]) -> T)? = nil,
        completion: ((Result<T, {{ spec.title | caseUcfirst}}Error>) -> Void)? = nil
    ) {
        if bufferSink == nil {
            http.execute(
                request: request,
                delegate: ResponseAccumulator(request: request)
            ).futureResult.whenComplete( { result in
                complete(with: result)
            })
            return
        }

        http.execute(
            request: request,
            delegate: StreamingDelegate(request: request, sink: bufferSink)
        ).futureResult.whenComplete { result in
            complete(with: result)
        }

        func complete(with result: Result<HTTPClient.Response, Swift.Error>) {
            guard let completion = completion else {
                return
            }

            switch result {
            case .failure(let error): print(error)
            case .success(var response):
                switch response.status.code {
                case 0..<400:
                    if response.cookies.count > 0 {
                        UserDefaults.standard.set(
                            try! response.cookies.toJson(),
                            forKey: "\(response.host)-cookies"
                        )
                    }
                    switch T.self {
                    case is Bool.Type:
                        completion(.success(true as! T))
                    case is ByteBuffer.Type:
                        completion(.success(response.body! as! T))
                    default:
                        if response.body == nil {
                            completion(.success(true as! T))
                            return
                        }
                        let dict = try! JSONSerialization
                            .jsonObject(with: response.body!) as? [String: Any]

                        completion(.success(convert?(dict!) ?? dict! as! T))
                    }
                default:
                    var message = ""

                    do {
                        let dict = try JSONSerialization
                            .jsonObject(with: response.body!) as? [String: Any]

                        message = dict?["message"] as? String
                            ?? response.status.reasonPhrase
                    } catch {
                        message =  response.body!.readString(length: response.body!.readableBytes)!
                    }

                    let error = AppwriteError(
                        message: message,
                        code: Int(response.status.code)
                    )

                    completion(.failure(error))
                }
            }
        }
    }

    private func randomBoundary() -> String {
        var string = ""
        for _ in 0..<16 {
            string.append(Client.boundaryChars.randomElement()!)
        }
        return string
    }

    private func buildJSON(
        _ request: inout HTTPClient.Request,
        with params: [String: Any?] = [:]
    ) throws {
        let json = try JSONSerialization.data(withJSONObject: params, options: [])

        request.body = .data(json)
    }

    private func buildMultipart(
        _ request: inout HTTPClient.Request,
        with params: [String: Any?] = [:]
    ) {
        func addPart(name: String, value: Any) {
            bodyBuffer.writeString(DASHDASH)
            bodyBuffer.writeString(boundary)
            bodyBuffer.writeString(CRLF)
            bodyBuffer.writeString("Content-Disposition: form-data; name=\"\(name)\"")

            if let file = value as? File {
                bodyBuffer.writeString("; filename=\"\(file.name)\"")
                bodyBuffer.writeString(CRLF)
                bodyBuffer.writeString("Content-Length: \(bodyBuffer.readableBytes)")
                bodyBuffer.writeString(CRLF+CRLF)
                bodyBuffer.writeBuffer(&file.buffer)
                bodyBuffer.writeString(CRLF)
                return
            }

            let string = String(describing: value)
            bodyBuffer.writeString(CRLF)
            bodyBuffer.writeString("Content-Length: \(string.count)")
            bodyBuffer.writeString(CRLF+CRLF)
            bodyBuffer.writeString(string)
            bodyBuffer.writeString(CRLF)
        }

        let boundary = randomBoundary()
        var bodyBuffer = ByteBuffer()

        for (key, value) in params {
            switch key {
            case "file":
                addPart(name: key, value: value!)
            default:
                if let list = value as? [Any] {
                    for listValue in list {
                        addPart(name: "\(key)[]", value: listValue)
                    }
                    continue
                }
                addPart(name: key, value: value!)
            }
        }

        bodyBuffer.writeString(DASHDASH)
        bodyBuffer.writeString(boundary)
        bodyBuffer.writeString(DASHDASH)
        bodyBuffer.writeString(CRLF)

        request.headers.remove(name: "content-type")
        request.headers.add(name: "Content-Length", value: bodyBuffer.readableBytes.description)
        request.headers.add(name: "Content-Type", value: "multipart/form-data;boundary=\"\(boundary)\"")
        request.body = .byteBuffer(bodyBuffer)
    }

    private func addUserAgent() {
        let packageInfo = OSPackageInfo.get()
        let deviceInfo = OSDeviceInfo()
        var device = "";
        var operatingSystem = ""

        #if os(iOS)
        let iosinfo = deviceInfo.iOSInfo
        device = "\(iosinfo!.modelIdentifier) iOS/\(iosinfo!.systemVersion)";
        operatingSystem = "ios"
        #elseif os(tvOS)
        let iosinfo = deviceInfo.iOSInfo
        device = "\(iosinfo!.systemInfo.machine) tvOS/\(iosinfo!.systemVersion)";
        operatingSystem = "tvos"
        #elseif os(watchOS)
        let iosinfo = deviceInfo.iOSInfo
        device = "\(iosinfo!.systemInfo.machine) watchOS/\(iosinfo!.systemVersion)";
        operatingSystem = "watchos"
        #elseif os(macOS)
        let macinfo = deviceInfo.macOSInfo
        device = "(Macintosh; \(macinfo!.model))"
        operatingSystem = "macos"
        #elseif os(Linux)
        let lininfo = deviceInfo.linuxInfo
        device = "(Linux; U; \(lininfo!.id) \(lininfo!.version))"
        operatingSystem = "linux"
        #elseif os(Windows)
        let wininfo = deviceInfo.windowsInfo
        device = "(Windows NT; \(wininfo!.computerName))"
        operatingSystem = "windows"
        #endif

        #if !os(Linux) && !os(Windows)
        _ = addHeader(
            key: "user-agent",
            value: "\(packageInfo.packageName)/\(packageInfo.version) \(device)"
        )
        #endif
    }
}

extension Client {

    public enum HTTPStatus: Int {
      case unknown = -1
      case ok = 200
      case created = 201
      case accepted = 202
      case movedPermanently = 301
      case found = 302
      case badRequest = 400
      case notAuthorized = 401
      case paymentRequired = 402
      case forbidden = 403
      case notFound = 404
      case methodNotAllowed = 405
      case notAcceptable = 406
      case internalServerError = 500
      case notImplemented = 501
    }
}
