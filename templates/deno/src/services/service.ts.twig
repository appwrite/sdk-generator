{% macro get_generics(definition, spec, output = false, first = false) %}
{% apply spaceless %}
    {% if first and definition.additionalProperties %}
        {{definition.name | caseUcfirst}} extends Models.{{definition.name | caseUcfirst}}
    {% endif %}
    {% for property in definition.properties %}
        {% if spec.definitions[property.sub_schema].additionalProperties and output %}
            {{property.sub_schema | caseUcfirst}} extends Models.{{property.sub_schema | caseUcfirst}}
        {% endif %}
        {% if spec.definitions[property.sub_schema] %}
            {{_self.get_generics(spec.definitions[property.sub_schema], spec, true)}}
        {% endif %}
    {% endfor %}
{% endapply %}
{% endmacro %}
{% macro get_generics_return(definition, spec) %}
{% apply spaceless %}
    {% for property in definition.properties %}
        {% if spec.definitions[property.sub_schema].additionalProperties %}
            {{property.sub_schema | caseUcfirst}}
        {% endif %}
        {% if spec.definitions[property.sub_schema] %}
            {{_self.get_generics_return(spec.definitions[property.sub_schema], spec)}}
        {% endif %}
    {% endfor %}
{% endapply %}
{% endmacro %}
import { basename } from "https://deno.land/std@0.122.0/path/mod.ts";
import { Service } from '../service.ts';
import { Payload, Client } from '../client.ts';
import { AppwriteException } from '../exception.ts';
import type { Models } from '../models.d.ts';

export type UploadProgress = {
    $id: string;
    progress: number;
    sizeUploaded: number;
    chunksTotal: number;
    chunksUploaded: number;
}

export class {{ service.name | caseUcfirst }} extends Service {
{% for method in service.methods %}
{% set generics = _self.get_generics(spec.definitions[method.responseModel], spec, true, true) %}
{% set generics_return = _self.get_generics_return(spec.definitions[method.responseModel], spec) %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all %}
     * @param {{ '{' }}{{ parameter.type | typeName }}{{ '}' }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
     * @throws {AppwriteException}
     * @returns {Promise}
     */
    async {{ method.name | caseCamel }}{% if generics %}<{{generics}}>{% endif %}({% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required %}?{% endif %}: {{ parameter.type | typeName }}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, onProgress = (progress: UploadProgress) => {}{% endif %}): Promise<{% if method.type == 'webAuth' %}Response{% elseif method.type == 'location' %}Response{% else %}{% if method.responseModel and method.responseModel != 'any' %}{% if not spec.definitions[method.responseModel].additionalProperties %}Models.{% endif %}{{method.responseModel | caseUcfirst}}{% if generics_return %}<{{generics_return}}>{% endif %}{% else %}Response{% endif %}{% endif %}> {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
        }

{% endif %}
{% endfor %}
        let path = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name }}{{ '}' }}', {{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
        let payload: Payload = {};

{% for parameter in method.parameters.query %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" ) %}.toString(){% endif %};
        }

{% endfor %}
{% for parameter in method.parameters.body %}
        if (typeof {{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = {{ parameter.name | caseCamel | escapeKeyword }}{% if method.consumes[0] == "multipart/form-data" and ( parameter.type != "string" and parameter.type != "array" ) %}.toString(){% endif %};
        }
{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
        const {size: size} = await Deno.stat({{ parameter.name | caseCamel | escapeKeyword }});

        if (size <= Client.CHUNK_SIZE) {
            payload['{{ parameter.name }}'] = new File([await Deno.readFile({{ parameter.name | caseCamel | escapeKeyword }})], basename({{ parameter.name | caseCamel | escapeKeyword }}));

            return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
                '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            }, payload);
        } else {
            const stream = await Deno.open({{ parameter.name | caseCamel | escapeKeyword }}, { read: true });

            let id = undefined;
            let response = undefined;

            let counter = 0;
            const totalCounters = Math.ceil(size / Client.CHUNK_SIZE);

            const headers: { [header: string]: string } = {
{% for parameter in method.parameters.header %}
                    '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                    '{{ key }}': '{{ header }}',
{% endfor %}
            };

{% for parameter in method.parameters.all %}
{% if parameter.isUploadID %}
            if({{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
                try {
                    response = await this.client.call('get', path + '/' + {{ parameter.name }}, headers);
                    counter = response.chunksUploaded;
                } catch(e) {
                }
            }
{% endif %}
{% endfor %}

            for (counter; counter < totalCounters; counter++) {
                const start = (counter * Client.CHUNK_SIZE);
                const end = Math.min((((counter * Client.CHUNK_SIZE) + Client.CHUNK_SIZE) - 1), size);
                
                headers['content-range'] = 'bytes ' + start + '-' + end + '/' + size

                if (id) {
                    headers['x-{{spec.title | caseLower }}-id'] = id;
                }
                
                const totalBuffer = new Uint8Array(Client.CHUNK_SIZE);

                for (let blockIndex = 0; blockIndex < Client.CHUNK_SIZE / Client.DENO_READ_CHUNK_SIZE; blockIndex++) {
                    const buf = new Uint8Array(Client.DENO_READ_CHUNK_SIZE);
                    const cursorPosition = await Deno.seek(stream.rid, start + (blockIndex * 16384), Deno.SeekMode.Start);
                    const numberOfBytesRead = await Deno.read(stream.rid, buf);

                    if (!numberOfBytesRead) {
                        break;
                    }

                    for (let byteIndex = 0; byteIndex < Client.DENO_READ_CHUNK_SIZE; byteIndex++) {
                        totalBuffer[(blockIndex * Client.DENO_READ_CHUNK_SIZE) + byteIndex] = buf[byteIndex];
                    }
                }
                
                payload['{{ parameter.name }}'] = new File([totalBuffer], basename({{ parameter.name | caseCamel | escapeKeyword }}));

                response = await this.client.call('{{ method.method | caseLower }}', path, headers, payload{% if method.type == 'location' %}, 'arraybuffer'{% endif %});

                if (!id) {
                    id = response['$id'];
                }

                if (onProgress !== null) {
                    onProgress({
                        $id: response['$id'],
                        progress: Math.min((counter+1) * Client.CHUNK_SIZE, size) / size * 100,
                        sizeUploaded: end+1,
                        chunksTotal: response['chunksTotal'],
                        chunksUploaded: response['chunksUploaded']
                    });
                }
            }

            return response;
        }
{% endif %}
{% endfor %}
{% else %}
        return await this.client.call('{{ method.method | caseLower }}', path, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name }}': ${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload);
{% endif %}
    }
{% endfor %}
}