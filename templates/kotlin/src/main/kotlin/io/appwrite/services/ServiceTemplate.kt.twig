{% macro parameter(parameter) %}{{ parameter.name | caseCamel }}: {{ parameter.type | typeName }}{% if not parameter.required %}? = null{% endif %}{% endmacro %}
{% macro method_parameters(parameters, consumes) %}
{% if parameters.all|length > 0 %}{% for parameter in parameters.all | filter((param) => not param.isGlobal) %}{{ '\n\t\t' }}{{ _self.parameter(parameter) }}{% if not loop.last %}{{ ',' }}{% endif %}{% endfor %}{% if 'multipart/form-data' in consumes %}, onProgress: ((UploadProgress) -> Unit)? = null{% endif %}{% endif %}
{% endmacro %}
{% macro methodNeedsSecurityParameters(method) %}
{% if (method.type == "webAuth" or method.type == "location") and method.security|length > 0 %}{{ true }}{% else %}{{false}}{% endif %}
{% endmacro %}
{% macro resultType(namespace, method) %}
{% if method.type == "webAuth" %}Bool{% elseif method.type == "location" %}ByteArray{% elseif not method.responseModel or method.responseModel == 'any' %}Any{% else %}{{ namespace | caseDot}}.models.{{method.responseModel | caseUcfirst}}{% endif %}
{% endmacro %}
package {{ sdk.namespace | caseDot }}.services
import {{ sdk.namespace | caseDot }}.Client
import {{ sdk.namespace | caseDot }}.models.*
{% if service.features.webAuth %}
import {{ sdk.namespace | caseDot }}.WebAuthComponent
import androidx.activity.ComponentActivity
{% endif %}
import {{ sdk.namespace | caseDot }}.exceptions.{{ spec.title | caseUcfirst }}Exception
import okhttp3.Cookie
import okhttp3.Response
{% if (service.features.webAuth or service.features.location) %}
import okhttp3.HttpUrl
import okhttp3.HttpUrl.Companion.toHttpUrl
{% endif %}
import java.io.File

class {{ service.name | caseUcfirst }} : Service {

{% if service.globalParams | length %}
{% for parameter in service.globalParams %}
    val {{ parameter.name | caseCamel | escapeKeyword }}: {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}?{% endif %}

{% endfor %}

    public constructor(client: Client,{% for parameter in service.globalParams %} {{ parameter.name | caseCamel | escapeKeyword }}: {{ parameter.type | typeName | overrideIdentifier }}{% if not parameter.required %}? = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}) : super(client) {
{% for parameter in service.globalParams %}
        this.{{ parameter.name | caseCamel | escapeKeyword }} = {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
    }
{% else %}
    public constructor (client: Client) : super(client) { }
{% endif %}

{% for method in service.methods %}
    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment1 }}
     *
{% endif %}
{% for parameter in method.parameters.all | filter((param) => not param.isGlobal) %}
     * @param {{ parameter.name | caseCamel }} {{ parameter.description }}
{% endfor %}
     * {% if method.type != "webAuth" %}@return [{{ _self.resultType(sdk.namespace, method) }}]{% endif %}
     
     */
    @JvmOverloads
    @Throws({{ spec.title | caseUcfirst }}Exception::class)
    suspend fun {{ method.name | caseCamel }}({% if method.type == "webAuth" %}{{ '\n\t\t' }}activity: ComponentActivity{% if method.parameters.all | length > 0 %}, {% endif %}{% endif %}{{ _self.method_parameters(method.parameters, method.consumes) }}{% if method.parameters.all|length > 0 %}{{ '\n\t' }}{% endif %}){% if method.type != "webAuth" %}: {{ _self.resultType(sdk.namespace, method) }}{% endif %} {
        val path = "{{ method.path }}"{% for parameter in method.parameters.path %}.replace("{{ '{' ~ parameter.name | caseCamel ~ '}' }}", {{ parameter.name | caseCamel }}){% endfor %}

        val params = mutableMapOf<String, Any?>(
{% for parameter in method.parameters.query | merge(method.parameters.body) %}
            "{{ parameter.name }}" to {{ parameter.name | caseCamel }}{% if not loop.last or _self.methodNeedsSecurityParameters(method) %},{% endif %}

{% endfor %}
{% if _self.methodNeedsSecurityParameters(method) %}
{% for node in method.security %}
{% for key,header in node|keys %}
            "{{header|caseLower}}" to client.config["{{header|caseLower}}"]{% if not loop.last %},{% endif %}

{% endfor %}{% endfor %}{% endif %}
        )
{% if method.type == 'webAuth' %}
        val query = mutableListOf<String>()
        params.forEach {
            when (it.value) {
                null -> {
                    return@forEach
                }
                is List<*> -> {
                    query.add("${it.key}[]=${it.value.toString()}")
                }
                else -> {
                   query.add("${it.key}=${it.value.toString()}")
                }
            }
        }

        val url = Uri.parse("${client.endPoint}${path}?${query.joinToString("&")}")
        val callbackUrlScheme = "{{ spec.title | caseLower }}-callback-${client.config["project"]}"

        WebAuthComponent.authenticate(activity, url, callbackUrlScheme) {
            if (it.isFailure) {
                throw it.exceptionOrNull()!!
            }

            val resultUrl = it.getOrNull()!!
            val uri = Uri.parse(resultUrl)
            val key = uri.getQueryParameter("key")
            val secret = uri.getQueryParameter("secret")
            if (key == null || secret == null) {
                throw {{ spec.title | caseUcfirst }}Exception("Authentication cookie missing!")
            }
            val cookie = Cookie.Builder()
                .name(key)
                .value(secret)
                .domain(Uri.parse(client.endPoint).host!!)
                .httpOnly()
                .build()
            
            client.http.cookieJar.saveFromResponse(
                client.endPoint.toHttpUrl(),
                listOf(cookie)
            )
        }
{% elseif method.type == 'location' %}
        return client.call(
            "{{ method.method | caseUpper }}",
            path,
            params = params,
            responseType = {{ _self.resultType(sdk.namespace, method) }}::class.java
        )
{% else %}
        val headers = mutableMapOf(
{{ method.headers|map((header, key) => "            \"#{key}\" to \"#{header}\"")|join(',\n')|raw }}
        )
{% if method.responseModel %}
        val converter: (Map<String, Any>) -> {{ _self.resultType(sdk.namespace, method) }} = {
{% if method.responseModel == 'any' %}
            it
{% else %}
            {{ _self.resultType(sdk.namespace, method) }}.from(map = it)
{% endif %}
        }
{% endif %}
{% if 'multipart/form-data' in method.consumes %}
        val idParamName: String? = {% if method.parameters.all | filter(p => p.isUploadID) | length > 0 %}{% for parameter in method.parameters.all | filter(parameter => parameter.isUploadID) %}"{{ parameter.name }}"{% endfor %}{% else %}null{% endif %}

{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}
        val paramName = "{{ parameter.name }}"
{% endif %}
{% endfor %}
        return client.chunkedUpload(
            path,
            headers,
            params,
            responseType = {{ _self.resultType(sdk.namespace, method) }}::class.java,
{% if method.responseModel %}
            converter,
{% endif %}
            paramName,
            idParamName,
            onProgress,
        )
{% else %}
        return client.call(
            "{{ method.method | caseUpper }}",
            path,
            headers,
            params,
            responseType = {{ _self.resultType(sdk.namespace, method) }}::class.java,
{% if method.responseModel %}
            converter,
{% endif %}
        )
{% endif %}
{% endif %}
    }
    
{% endfor %}
}