const fs = require("fs");
const path = require("path");
const { spawn } = require("child_process");
const { Command } = require("commander");
const { fetch } = require("undici");
const chalk = require("chalk");
const inquirer = require("inquirer");
const { success, log, warn, error, hint, actionRunner, commandDescriptions } = require("../parser");
const { getLatestVersion, compareVersions } = require("../utils");
const { version } = require("../../package.json");

/**
 * Check if the CLI was installed via npm
 */
const isInstalledViaNpm = () => {
    try {
        const scriptPath = process.argv[1];

        if (scriptPath.includes('node_modules') && scriptPath.includes('{{ language.params.npmPackage|caseDash }}')) {
            return true;
        }

        if (scriptPath.includes('/usr/local/lib/node_modules/') || 
            scriptPath.includes('/opt/homebrew/lib/node_modules/') ||
            scriptPath.includes('/.npm-global/') ||
            scriptPath.includes('/node_modules/.bin/')) {
            return true;
        }
        
        return false;
    } catch (e) {
        return false;
    }
};

/**
 * Check if the CLI was installed via Homebrew
 */
const isInstalledViaHomebrew = () => {
    try {
        const scriptPath = process.argv[1];
        return scriptPath.includes('/opt/homebrew/') || scriptPath.includes('/usr/local/Cellar/');
    } catch (e) {
        return false;
    }
};



/**
 * Execute command and return promise
 */
const execCommand = (command, args = [], options = {}) => {
    return new Promise((resolve, reject) => {
        const child = spawn(command, args, { 
            stdio: 'inherit',
            shell: true,
            ...options 
        });
        
        child.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`Command failed with exit code ${code}`));
            }
        });
        
        child.on('error', (err) => {
            reject(err);
        });
    });
};

/**
 * Update via npm
 */
const updateViaNpm = async () => {
    try {
        await execCommand('npm', ['install', '-g', '{{ language.params.npmPackage|caseDash }}@latest']);
        console.log("");
        success("Updated to latest version via npm!");
        hint("Run '{{ language.params.executableName|caseLower }} --version' to verify the new version.");
    } catch (e) {
        if (e.message.includes('EEXIST') || e.message.includes('file already exists')) {
            console.log("");
            success("Latest version is already installed via npm!");
            hint("The CLI is up to date. Run '{{ language.params.executableName|caseLower }} --version' to verify.");
        } else {
            console.log("");
            error(`Failed to update via npm: ${e.message}`);
            hint("Try running: npm install -g {{ language.params.npmPackage|caseDash }}@latest --force");
        }
    }
};

/**
 * Update via Homebrew
 */
const updateViaHomebrew = async () => {
    try {
        await execCommand('brew', ['upgrade', '{{ language.params.executableName|caseLower }}']);
        console.log("");
        success("Updated to latest version via Homebrew!");
        hint("Run '{{ language.params.executableName|caseLower }} --version' to verify the new version.");
    } catch (e) {
        if (e.message.includes('already installed') || e.message.includes('up-to-date')) {
            console.log("");
            success("Latest version is already installed via Homebrew!");
            hint("The CLI is up to date. Run '{{ language.params.executableName|caseLower }} --version' to verify.");
        } else {
            console.log("");
            error(`Failed to update via Homebrew: ${e.message}`);
            hint("Try running: brew upgrade {{ language.params.executableName|caseLower }}");
        }
    }
};

/**
 * Show manual update instructions
 */
const showManualInstructions = (latestVersion) => {
    log("Manual update options:");
    console.log("");
    
    log(`${chalk.bold("Option 1: NPM")}`);
    console.log(`  npm install -g {{ language.params.npmPackage|caseDash }}@latest`);
    console.log("");
    
    log(`${chalk.bold("Option 2: Homebrew")}`);
    console.log(`  brew upgrade {{ language.params.executableName|caseLower }}`);
    console.log("");
    
    log(`${chalk.bold("Option 3: Download Binary")}`);
    console.log(`  Visit: https://github.com/{{ language.params.npmPackage|caseDash }}/releases/tag/${latestVersion}`);
};

/**
 * Show interactive menu for choosing update method
 */
const chooseUpdateMethod = async (latestVersion) => {
    const choices = [
        { name: 'NPM', value: 'npm' },
        { name: 'Homebrew', value: 'homebrew' },
        { name: 'Show manual instructions', value: 'manual' }
    ];

    const { method } = await inquirer.prompt([
        {
            type: 'list',
            name: 'method',
            message: 'Could not detect installation method. How would you like to update?',
            choices: choices
        }
    ]);

    switch (method) {
        case 'npm':
            await updateViaNpm();
            break;
        case 'homebrew':
            await updateViaHomebrew();
            break;
        case 'manual':
            showManualInstructions(latestVersion);
            break;
    }
};

/**
 * Main update function
 */
const updateCli = async ({ manual } = {}) => {
    try {
        const latestVersion = await getLatestVersion();
        
        const comparison = compareVersions(version, latestVersion);
        
        if (comparison === 0) {
            success(`You're already running the latest version (${chalk.bold(version)})!`);
            return;
        } else if (comparison < 0) {
            warn(`You're running a newer version (${chalk.bold(version)}) than the latest released version (${chalk.bold(latestVersion)}).`);
            hint("This might be a pre-release or development version.");
            return;
        }
        
        log(`Updating from ${chalk.blue(version)} to ${chalk.green(latestVersion)}...`);
        console.log("");
        
        if (manual) {
            showManualInstructions(latestVersion);
            return;
        }
        
        if (isInstalledViaNpm()) {
            await updateViaNpm();
        } else if (isInstalledViaHomebrew()) {
            await updateViaHomebrew();
        } else {
            await chooseUpdateMethod(latestVersion);
        }
        
    } catch (e) {
        console.log("");
        error(`Failed to check for updates: ${e.message}`);
        hint("You can manually check for updates at: https://github.com/{{ language.params.npmPackage|caseDash }}/releases");
    }
};

const update = new Command("update")
    .description("Update the {{ spec.title|caseUcfirst }} CLI to the latest version")
    .option("--manual", "Show manual update instructions instead of auto-updating")
    .action(actionRunner(updateCli));

module.exports = {
    update
};
