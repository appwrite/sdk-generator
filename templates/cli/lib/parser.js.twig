const chalk = require('chalk');
const commander = require('commander');
const Table = require('cli-table3');
const { description } = require('../package.json');

const cliConfig = {
  verbose: false,
  json: false
};

const parse = (data) => {
    if (cliConfig.json) {
        drawJSON(data);
        return;
    }

    for (let key in data) {
        if (Array.isArray(data[key])) {
            console.log(`${chalk.yellow.bold.underline(key)}`);
            if (typeof data[key][0] === 'object') {
                drawTable(data[key]);
            } else {
                drawJSON(data[key]);
            }
        } else if (typeof data[key] === 'object') {
            console.log(`${chalk.yellow.bold.underline(key)}`)
            parse(data[key]);
        } else {
            console.log(`${chalk.yellow.bold(key)} : ${data[key]}`);
        }
    }
}

const drawTable = (data) => {
    if (data.length == 0) {
        console.log("[]")
        return;
    }

    // Create an object with all the keys in it
    let obj = data.reduce((res, item) => ({ ...res, ...item }));
    // Get those keys as an array
    let keys = Object.keys(obj);
    // Create an object with all keys set to the default value ''
    let def = keys.reduce((result, key) => {
        result[key] = '-'
        return result;
    }, {});
    // Use object destrucuring to replace all default values with the ones we have
    data = data.map((item) => ({ ...def, ...item }));

    let columns = Object.keys(data[0]);

    let table = new Table({
        head: columns.map(c => chalk.cyan.italic.bold(c)),
        chars: {
            'top': ' ',
            'top-mid': ' ',
            'top-left': ' ',
            'top-right': ' ',
            'bottom': ' ',
            'bottom-mid': ' ',
            'bottom-left': ' ',
            'bottom-right': ' ',
            'left': ' ',
            'left-mid': ' ',
            'mid': chalk.cyan('─'),
            'mid-mid': chalk.cyan('┼'),
            'right': ' ',
            'right-mid': ' ',
            'middle': chalk.cyan('│')
        }
    });

    data.forEach(row => {
        let rowValues = [];
        for (let key in row) {
            if (row[key] === null) {
                rowValues.push("-");
            } else if (Array.isArray(row[key])) {
                switch (row[key].length) {
                    case 1:
                        if (typeof row[key][0] === 'object') {
                            rowValues.push(`array(${row[key].length})`);
                        } else {
                            rowValues.push(row[key][0]);
                        }
                        break;
                    default:
                        rowValues.push(`array(${row[key].length})`);
                        break;
                }
            } else if (typeof row[key] === 'object') {
                rowValues.push("object");
            } else {
                rowValues.push(row[key]);
            }
        }
        table.push(rowValues);
    });
    console.log(table.toString());
}

const drawJSON = (data) => {
    console.log(JSON.stringify(data, null, 2));
}

const parseError = (err) => {
    if(cliConfig.verbose) {
        console.error(err);
    }

    error(err.message);

    process.exit(1)
}

const actionRunner = (fn) => {
    return (...args) => fn(...args).catch(parseError);
}

const parseInteger = (value) => {
    const parsedValue = parseInt(value, 10);
    if (isNaN(parsedValue)) {
        throw new commander.InvalidArgumentError('Not a number.');
    }
    return parsedValue;
}

const parseBool = (value) => {
    if (value === 'true') return true;
    if (value === 'false') return false;
    throw new commander.InvalidArgumentError('Not a boolean.');
}

const log = (message) => {
    console.log(`${chalk.cyan.bold("ℹ Info")} ${chalk.cyan(message ?? "")}`);
}

const success = (message) => {
    console.log(`${chalk.green.bold("✓ Success")} ${chalk.green(message ?? "")}`);
}

const error = (message) => {
    console.error(`${chalk.red.bold("✗ Error")} ${chalk.red(message ?? "")}`);
}

const logo = {{ language.params.logo | raw }};

const commandDescriptions = {
    "account": `The account command allows you to authenticate and manage a user account.`,
    "avatars": `The avatars command aims to help you complete everyday tasks related to your app image, icons, and avatars.`,
    "databases": `The databases command allows you to create structured collections of documents, query and filter lists of documents.`,
    "deploy": `The deploy command provides a convenient wrapper for deploying your functions and collections.`,
    "functions": `The functions command allows you view, create and manage your Cloud Functions.`,
    "health": `The health command allows you to both validate and monitor your {{ spec.title|caseUcfirst }} server's health.`,
    "init": `The init command helps you initialize your {{ spec.title|caseUcfirst }} project, functions and collections`,
    "locale": `The locale command allows you to customize your app based on your users' location.`,
    "projects": `The projects command allows you to view, create and manage your {{ spec.title|caseUcfirst }} projects.`,
    "storage": `The storage command allows you to manage your project files.`,
    "teams": `The teams command allows you to group users of your project and to enable them to share read and write access to your project resources`,
    "users": `The users command allows you to manage your project users.`,
    "client": `The client command allows you to configure your CLI`,
    "login": `The login command allows you to authenticate and manage a user account.`,
    "logout": `The logout command allows you to logout of your {{ spec.title|caseUcfirst }} account.`,
    "main": chalk.redBright(`${logo}${description}`),
{% if sdk.test == "true" %}
{% for service in spec.services %}
    "{{ service.name | caseLower }}": `The {{ service.name }} command allows you to manage your {{ service.name }} service.`,
{% endfor %}
{% endif %}
}

module.exports = {
    parse,
    actionRunner,
    parseInteger,
    parseBool,
    log,
    success,
    error,
    commandDescriptions,
    cliConfig
}