const inquirer = require("inquirer");
const JSONbig = require("json-bigint")({ storeAsString: false });
const { Command } = require("commander");
const { localConfig } = require("../config");
const { questionsDeployFunctions, questionsGetEntrypoint, questionsDeployCollections, questionsConfirmDeployCollections } = require("../questions");
const { actionRunner, success, log, error, commandDescriptions } = require("../parser");
const { functionsGet, functionsCreate, functionsUpdate, functionsCreateDeployment, functionsUpdateDeployment, functionsListVariables, functionsDeleteVariable, functionsCreateVariable } = require('./functions');
const {
    databasesGet,
    databasesCreate,
    databasesCreateBooleanAttribute,
    databasesGetCollection,
    databasesCreateCollection,
    databasesCreateStringAttribute,
    databasesCreateIntegerAttribute,
    databasesCreateFloatAttribute,
    databasesCreateEmailAttribute,
    databasesCreateDatetimeAttribute,
    databasesCreateIndex,
    databasesCreateUrlAttribute,
    databasesCreateIpAttribute,
    databasesCreateEnumAttribute,
    databasesDeleteAttribute,
    databasesListAttributes,
    databasesListIndexes,
    databasesDeleteIndex
} = require("./databases");

const POOL_DEBOUNCE = 2000; // in milliseconds
const POOL_MAX_DEBOUNCES = 30;

const awaitPools = {
    wipeAttributes: async (databaseId, collectionId, iteration = 1) => {
        if (iteration > POOL_MAX_DEBOUNCES) {
            return false;
        }

        // TODO: Pagination?
        const { attributes: remoteAttributes } = await databasesListAttributes({
            databaseId,
            collectionId,
            queries: [ 'limit(100)' ],
            parseOutput: false
        });

        if (remoteAttributes.length <= 0) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POOL_DEBOUNCE));
        return await awaitPools.wipeAttributes(databaseId, collectionId, iteration + 1);
    },
    wipeIndexes: async (databaseId, collectionId, iteration = 1) => {
        if (iteration > POOL_MAX_DEBOUNCES) {
            return false;
        }

        // TODO: Pagination?
        const { indexes: remoteIndexes } = await databasesListIndexes({
            databaseId,
            collectionId,
            queries: [ 'limit(100)' ],
            parseOutput: false
        });

        if (remoteIndexes.length <= 0) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POOL_DEBOUNCE));
        return await awaitPools.wipeIndexes(databaseId, collectionId, iteration + 1);
    },
    expectAttributes: async (databaseId, collectionId, attributeKeys, iteration = 1) => {
        if (iteration > POOL_MAX_DEBOUNCES) {
            return false;
        }

        // TODO: Pagination?
        const { attributes: remoteAttributes } = await databasesListAttributes({
            databaseId,
            collectionId,
            queries: [ 'limit(100)' ],
            parseOutput: false
        });

        const readyAttributeKeys = remoteAttributes.filter((attribute) => {
            if (attributeKeys.includes(attribute.key)) {
                if (['stuck', 'failed'].includes(attribute.status)) {
                    throw new Error(`Attribute '${attribute.key}' failed!`);
                }

                return attribute.status === 'available';
            }

            return false;
        }).map(attribute => attribute.key);

        if (readyAttributeKeys.length >= attributeKeys.length) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POOL_DEBOUNCE));
        return await awaitPools.expectAttributes(databaseId, collectionId, attributeKeys, iteration + 1);
    },
    expectIndexes: async (databaseId, collectionId, indexKeys, iteration = 1) => {
        if (iteration > POOL_MAX_DEBOUNCES) {
            return false;
        }

        // TODO: Pagination?
        const { indexes: remoteIndexes } = await databasesListIndexes({
            databaseId,
            collectionId,
            queries: [ 'limit(100)' ],
            parseOutput: false
        });

        const readyIndexKeys = remoteIndexes.filter((index) => {
            if (indexKeys.includes(index.key)) {
                if (['stuck', 'failed'].includes(index.status)) {
                    throw new Error(`Index '${index.key}' failed!`);
                }

                return index.status === 'available';
            }

            return false;
        }).map(index => index.key);

        if (readyIndexKeys.length >= indexKeys.length) {
            return true;
        }

        await new Promise(resolve => setTimeout(resolve, POOL_DEBOUNCE));
        return await awaitPools.expectIndexes(databaseId, collectionId, indexKeys, iteration + 1);
    },
}

const deploy = new Command("deploy")
    .description(commandDescriptions['deploy'])
    .action(actionRunner(async (_options, command) => {
        command.help()
    }));

const deployFunction = async ({ functionId, all, yes } = {}) => {
    let response = {};

    const functionIds = [];

    if(functionId) {
        functionIds.push(functionId);
    } else if(all) {
        const functions = localConfig.getFunctions();
        if (functions.length === 0) {
            throw new Error("No functions found in the current directory.");
        }
        functionIds.push(...functions.map((func, idx) => {
            return func.$id;
        }));
    }

    if(functionIds.length <= 0) {
        const answers = await inquirer.prompt(questionsDeployFunctions[0]);
        functionIds.push(...answers.functions);
    }

    let functions = functionIds.map((id) => {
      const functions = localConfig.getFunctions();
      const func = functions.find((f) => f.$id === id);

      if(!func) {
        throw new Error("Function '" + id + "' not found.")
      }

      return func;
    });
    
    for (let func of functions) {
        log(`Deploying function ${func.name} ( ${func['$id']} )`)

        try {
            response = await functionsGet({
                functionId: func['$id'],
                parseOutput: false,
            });

            if(response.runtime !== func.runtime) {
                throw new Error(`Runtime missmatch! (local=${func.runtime},remote=${response.runtime}) Please delete remote function or update your appwrite.json`);
            }

            if(func.variables) {
                // Delete existing variables

                // TODO: Pagination?
                const { variables: remoteVariables } = await functionsListVariables({
                    functionId: func['$id'],
                    queries: [ 'limit(100)' ],
                    parseOutput: false
                });

                if(remoteVariables.length > 0) {
                    if(!yes) {
                        const variableAnswers = await inquirer.prompt(questionsDeployFunctions[1])

                        if (variableAnswers.override !== "YES") {
                            log(`Received "${variableAnswers.override}". Skipping ${func.name} ( ${func['$id']} )`);
                            continue;
                        }
                    }

                    await Promise.all(remoteVariables.map(async remoteVariable => {
                        await functionsDeleteVariable({
                            functionId: func['$id'],
                            variableId: remoteVariable['$id'],
                            parseOutput: false
                        });
                    }));
                }

                // Deploy local variables
                await Promise.all(Object.keys(func.variables).map(async localVariableKey => {
                    await functionsCreateVariable({
                        functionId: func['$id'],
                        key: localVariableKey,
                        value: func.variables[localVariableKey],
                        parseOutput: false
                    });
                }));
            }

            response = await functionsUpdate({
                functionId: func['$id'],
                name: func.name,
                execute: func.execute,
                vars: JSON.stringify(response.vars),
                events: func.events,
                schedule: func.schedule,
                timeout: func.timeout,
                parseOutput: false
            });
        } catch (e) {
            if (e.code == 404) {
                log(`Function ${func.name} ( ${func['$id']} ) does not exist in the project. Creating ... `);
                response = await functionsCreate({
                    functionId: func.$id || 'unique()',
                    name: func.name,
                    runtime: func.runtime,
                    execute: func.execute,
                    vars: JSON.stringify(func.vars),
                    events: func.events,
                    schedule: func.schedule,
                    timeout: func.timeout,
                    parseOutput: false
                });

                localConfig.updateFunction(func['$id'], {
                    "$id": response['$id'],
                });

                func["$id"] = response['$id'];
                log(`Function ${func.name} created.`);
            } else {
                throw e;
            }
        }

        // Create tag
        if (!func.entrypoint) {
            answers = await inquirer.prompt(questionsGetEntrypoint)
            func.entrypoint = answers.entrypoint;
            localConfig.updateFunction(func['$id'], func);
        }

        try {
            response = await functionsCreateDeployment({
                functionId: func['$id'],
                entrypoint: func.entrypoint,
                code: func.path,
                activate: true,
                parseOutput: false
            })

            success(`Deployed ${func.name} ( ${func['$id']} )`);

        } catch (e) {
            switch (e.code) {
                case 'ENOENT':
                    error(`Function ${func.name} ( ${func['$id']} ) not found in the current directory. Skipping ...`);
                    break;
                default:
                    throw e;
            }
        }
    }
}

const createAttribute = async (databaseId, collectionId, attribute) => {
    switch (attribute.type) {
        case 'string':
            switch (attribute.format) {
                case 'email':
                    return await databasesCreateEmailAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'url':
                    return await databasesCreateUrlAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'ip':
                    return await databasesCreateIpAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                case 'enum':
                    return await databasesCreateEnumAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        elements: attribute.elements,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })
                default:
                    return await databasesCreateStringAttribute({
                        databaseId,
                        collectionId,
                        key: attribute.key,
                        size: attribute.size,
                        required: attribute.required,
                        xdefault: attribute.default,
                        array: attribute.array,
                        parseOutput: false
                    })

            }
        case 'integer':
            return await databasesCreateIntegerAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                min: attribute.min,
                max: attribute.max,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'double':
            return databasesCreateFloatAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                min: attribute.min,
                max: attribute.max,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'boolean':
            return databasesCreateBooleanAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
        case 'datetime':
            return databasesCreateDatetimeAttribute({
                databaseId,
                collectionId,
                key: attribute.key,
                required: attribute.required,
                xdefault: attribute.default,
                array: attribute.array,
                parseOutput: false
            })
    }
}

const deployCollection = async ({ all, yes } = {}) => {
    let response = {};

    let collectionIds = [];
    const configCollections = localConfig.getCollections();

    if(all) {
        if (configCollections.length === 0) {
            throw new Error("No collections found in the current directory. Run `{{ language.params.executableName }} init collection` to fetch all your collections.");
        }
        collectionIds.push(...configCollections.map((c) => c.$id));
    }

    if(collectionIds.length <= 0) {
        let answers = await inquirer.prompt(questionsDeployCollections[0])
        collectionIds.push(...answers.collections);
    }

    let collections = [];

    for(const collectionId of collectionIds) {
        const idCollections = configCollections.filter((c) => c.$id === collectionId);
        collections.push(...idCollections);
    }

    for (let collection of collections) {
        log(`Deploying collection ${collection.name} ( ${collection['$id']} )`)

        let databaseId;

        try {
            const database = await databasesGet({
                databaseId: collection.databaseId,
                parseOutput: false,
            });
            databaseId = database.$id;
        } catch(err) {
            log(`Database ${collection.databaseId} not found. Creating it now...`);
            const database = await databasesCreate({
                databaseId: collection.databaseId,
                name: collection.databaseId,
                parseOutput: false,
            });
            databaseId = database.$id;
        }

        try {
            response = await databasesGetCollection({
                databaseId,
                collectionId: collection['$id'],
                parseOutput: false,
            })
            log(`Collection ${collection.name} ( ${collection['$id']} ) already exists.`);

            if(!yes) {
                answers = await inquirer.prompt(questionsDeployCollections[1])
                if (answers.override !== "YES") {
                    log(`Received "${answers.override}". Skipping ${collection.name} ( ${collection['$id']} )`);
                    continue;
                }
            }

            log(`Updating attributes ... `);

            // TODO: Pagination?
            const { indexes: remoteIndexes } = await databasesListIndexes({
                databaseId,
                collectionId: collection['$id'],
                queries: [ 'limit(100)' ],
                parseOutput: false
            });

            await Promise.all(remoteIndexes.map(async index => {
                await databasesDeleteIndex({
                    databaseId,
                    collectionId: collection['$id'],
                    key: index.key,
                    parseOutput: false
                });
            }));

            const deleteIndexesPoolStatus = await awaitPools.wipeIndexes(databaseId, collection['$id']);
            if (!deleteIndexesPoolStatus) {
                throw new Error("Index deletion did not finish for too long.");
            }

            // TODO: Pagination?
            const { attributes: remoteAttributes } = await databasesListAttributes({
                databaseId,
                collectionId: collection['$id'],
                queries: [ 'limit(100)' ],
                parseOutput: false
            });
            
            await Promise.all(remoteAttributes.map(async attribute => {
                await databasesDeleteAttribute({
                    databaseId,
                    collectionId: collection['$id'],
                    key: attribute.key,
                    parseOutput: false
                });
            }));

            const deleteAttributesPoolStatus = await awaitPools.wipeAttributes(databaseId, collection['$id']);
            if (!deleteAttributesPoolStatus) {
                throw new Error("Attribute deletion did not finish for too long.");
            }

            await Promise.all(collection.attributes.map(async attribute => {
                await createAttribute(databaseId, collection['$id'], attribute);
            }));

            const attributeKeys = collection.attributes.map(attribute => attribute.key);
            const createPoolStatus = await awaitPools.expectAttributes(databaseId, collection['$id'], attributeKeys);
            if (!createPoolStatus) {
                throw new Error("Attribute creation did not finish for too long.");
            }

            success(`Created ${collection.attributes.length} attributes`);

            log(`Creating indexes ...`)
            await Promise.all(collection.indexes.map(async index => {
                await databasesCreateIndex({
                    databaseId,
                    collectionId: collection['$id'],
                    key: index.key,
                    type: index.type,
                    attributes: index.attributes,
                    orders: index.orders,
                    parseOutput: false
                });
            }));

            const indexKeys = collection.indexes.map(attribute => attribute.key);
            const indexPoolStatus = await awaitPools.expectIndexes(databaseId, collection['$id'], indexKeys);
            if (!indexPoolStatus) {
                throw new Error("Index creation did not finish for too long.");
            }

            success(`Created ${collection.indexes.length} indexes`);
        } catch (e) {
            if (e.code == 404) {
                log(`Collection ${collection.name} does not exist in the project. Creating ... `);
                response = await databasesCreateCollection({
                    databaseId,
                    collectionId: collection['$id'],
                    name: collection.name,
                    documentSecurity: collection.documentSecurity,
                    permissions: collection['$permissions'],
                    parseOutput: false
                })

                log(`Creating attributes ... `);
                await Promise.all(collection.attributes.map(async attribute => {
                    await createAttribute(databaseId, collection['$id'], attribute);
                }));

                const attributeKeys = collection.attributes.map(attribute => attribute.key);
                const attributePoolStatus = await awaitPools.expectAttributes(databaseId, collection['$id'], attributeKeys);
                if (!attributePoolStatus) {
                    throw new Error("Attribute creation did not finish for too long.");
                }

                success(`Created ${collection.attributes.length} attributes`);

                log(`Creating indexes ...`);
                await Promise.all(collection.indexes.map(async index => {
                    await databasesCreateIndex({
                        databaseId,
                        collectionId: collection['$id'],
                        key: index.key,
                        type: index.type,
                        attributes: index.attributes,
                        orders: index.orders,
                        parseOutput: false
                    });
                }));

                const indexKeys = collection.indexes.map(attribute => attribute.key);
                const indexPoolStatus = await awaitPools.expectIndexes(databaseId, collection['$id'], indexKeys);
                if (!indexPoolStatus) {
                    throw new Error("Index creation did not finish for too long.");
                }

                success(`Created ${collection.indexes.length} indexes`);

                success(`Deployed ${collection.name} ( ${collection['$id']} )`);
            } else {
                throw e;
            }
        }
    }
}

deploy
    .command("function")
    .description("Deploy functions in the current directory.")
    .option(`--functionId <functionId>`, `Function ID`)
    .option(`--all`, `Flag to deploy all functions`)
    .option(`--yes`, `Flag to confirm all warnings`)
    .action(actionRunner(deployFunction));

deploy
    .command("collection")
    .description("Deploy collections in the current project.")
    .option(`--all`, `Flag to deploy all functions`)
    .option(`--yes`, `Flag to confirm all warnings`)
    .action(actionRunner(deployCollection));

module.exports = {
    deploy
}