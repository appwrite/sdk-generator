{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}>{% else %}{{property.sub_schema | caseUcfirst | overrideIdentifier}}{% endif %}{% else %}{{property | typeName}}{% endif %}{% if not property.required %}?{% endif %}{% endmacro %}
{% macro property_name(definition, property) %}{{ property.name | caseUcfirst | removeDollarSign | escapeKeyword }}{% endmacro %}
{% macro array_source(src, required) %}{% if required %}((IEnumerable<object>){{ src | raw }}){% else %}({{ src | raw }} as IEnumerable<object> ?? Array.Empty<object>()){% endif %}{% endmacro %}
{%~ macro parse_primitive_array(items_type, src, required) -%}
    {{ _self.array_source(src, required) }}.Select(x => {% if items_type == "string" %}x?.ToString(){% elseif items_type == "integer" %}{% if not required %}x == null ? (long?)null : {% endif %}Convert.ToInt64(x){% elseif items_type == "number" %}{% if not required %}x == null ? (double?)null : {% endif %}Convert.ToDouble(x){% elseif items_type == "boolean" %}{% if not required %}x == null ? (bool?)null : {% endif %}(bool)x{% else %}x{% endif %}){% if required and items_type == "string" %}.Where(x => x != null){% endif %}.ToList()!
{%- endmacro -%}
{%~ macro parse_subschema_array(sub_schema_name, src, required) -%}
    {{ _self.array_source(src, required) }}.Select(it => {{ sub_schema_name | caseUcfirst | overrideIdentifier }}.From(map: (Dictionary<string, object>)it)).ToList()
{%- endmacro -%}
{% set DefinitionClass = definition.name | caseUcfirst | overrideIdentifier %}
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace {{ spec.title | caseUcfirst }}.Models
{
    public class {{ DefinitionClass }}
    {
        {%~ for property in definition.properties %}
        [JsonPropertyName("{{ property.name }}")]
        public {{ _self.sub_schema(property) }} {{ _self.property_name(definition, property) | overrideProperty(definition.name) }} { get; private set; }

        {%~ endfor %}
        {%~ if definition.additionalProperties %}
        public Dictionary<string, object> Data { get; private set; }

        {%~ endif %}
        public {{ DefinitionClass }}(
            {%~ for property in definition.properties %}
            {{ _self.sub_schema(property) }} {{ property.name | caseCamel | escapeKeyword }}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

            {%~ endfor %}
            {%~ if definition.additionalProperties %}
            Dictionary<string, object> data
            {%~ endif %}
        ) {
            {%~ for property in definition.properties %}
            {{ _self.property_name(definition, property) | overrideProperty(definition.name) }} = {{ property.name | caseCamel | escapeKeyword }};
            {%~ endfor %}
            {%~ if definition.additionalProperties %}
            Data = data;
            {%~ endif %}
        }

        public static {{ DefinitionClass }} From(Dictionary<string, object> map) => new {{ DefinitionClass }}(
            {%~ for property in definition.properties %}
            {%~ set v = 'v' ~ loop.index0 %}
            {%~ set mapAccess = 'map["' ~ property.name ~ '"]' %}
            {{ property.name | caseCamel | escapeKeyword | removeDollarSign }}:{{' '}}
                {%- if not property.required -%}map.TryGetValue("{{ property.name }}", out var {{ v }}) ? {% endif %}
                {%- if property.sub_schema %}
                    {%- if property.type == 'array' -%}
                        {%- if property.required -%}
                    {{ _self.parse_subschema_array(property.sub_schema, mapAccess, true) }}
                        {%- else -%}
                    {{ _self.parse_subschema_array(property.sub_schema, v, false) }}
                        {%- endif %}
                    {%- else -%}
                        {%- if property.required -%}
                        {{ property.sub_schema | caseUcfirst | overrideIdentifier }}.From(map: (Dictionary<string, object>){{ mapAccess | raw }})
                        {%- else -%}
                    ({{ v }} as Dictionary<string, object>) is { } obj
                            ? {{ property.sub_schema | caseUcfirst | overrideIdentifier }}.From(map: obj)
                            : null
                        {%- endif %}
                    {%- endif %}
                {%- else %}
                    {%- if property.type == 'array' -%}
                        {%- if property.required -%}
                    {{ _self.parse_primitive_array(property.items.type, mapAccess, true) }}
                        {%- else -%}
                    {{ _self.parse_primitive_array(property.items.type, v, false) }}
                        {%- endif -%}
                    {%- else %}
                        {%- if property.type == "integer" or property.type == "number" %}
                            {%- if not property.required -%}Convert.To{% if property.type == "integer" %}Int64{% else %}Double{% endif %}({{ v }}){% else %}Convert.To{% if property.type == "integer" %}Int64{% else %}Double{% endif %}({{ mapAccess | raw }}){%- endif %}
                        {%- else %}
                            {%- if property.type == "boolean" -%}
                                {%- if not property.required -%}
                                ({{ property | typeName }}?){{ v }}
                                {%- else -%}
                                ({{ property | typeName }}){{ mapAccess | raw }}
                                {%- endif %}
                            {%- else -%}
                                {%- if not property.required -%}
                                {{ v }}?.ToString()
                                {%- else -%}
                                {{ mapAccess | raw }}.ToString()
                                {%- endif %}
                            {%- endif %}
                        {%~ endif %}
                    {%~ endif %}
                {%~ endif %}
                {%- if not property.required %} : null{% endif %}
                {%- if not loop.last or (loop.last and definition.additionalProperties) %},
                {%~ endif %}
            {%~ endfor %}
            {%- if definition.additionalProperties %}
            data: map
            {%- endif ~%}
        );

        public Dictionary<string, object?> ToMap() => new Dictionary<string, object?>()
        {
            {%~ for property in definition.properties %}
            { "{{ property.name }}", {% if property.sub_schema %}{% if property.type == 'array' %}{{ _self.property_name(definition, property) | overrideProperty(definition.name) }}.Select(it => it.ToMap()){% else %}{{ _self.property_name(definition, property) | overrideProperty(definition.name) }}.ToMap(){% endif %}{% else %}{{ _self.property_name(definition, property) | overrideProperty(definition.name) }}{% endif %}{{ ' }' }}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

            {%~ endfor %}
            {%~ if definition.additionalProperties %}
            { "data", Data }
            {%~ endif %}
        };
        {%~ if definition.additionalProperties %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            fromJson.Invoke(Data);
        {%~ endif %}
        {%~ for property in definition.properties %}
        {%~ if property.sub_schema %}
        {%~ for def in spec.definitions %}
        {%~ if def.name == property.sub_schema and def.additionalProperties and property.type == 'array' %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            (T){{ property.name | caseUcfirst | escapeKeyword }}.Select(it => it.ConvertTo(fromJson));

        {%~ endif %}
        {%~ endfor %}
        {%~ endif %}
        {%~ endfor %}
    }
}
