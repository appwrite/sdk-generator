const os = require('os');
const URL = require('url').URL;
const Query = require('./query.js');
const {fetch, FormData, Agent} = require('undici');
const {{spec.title | caseUcfirst}}Exception = require('./exception.js');

class Client {
    static CHUNK_SIZE = 5*1024*1024; // 5MB
    
    constructor() {
        this.endpoint = '{{spec.endpoint}}';
        this.headers = {
            'accept-encoding': '*',
            'content-type': '',
            'user-agent' : `{{spec.title | caseUcfirst}}{{language.name | caseUcfirst}}SDK/{{ sdk.version }} (${os.type()}; ${os.version()}; ${os.arch()})`,
            'x-sdk-name': '{{ sdk.name }}',
            'x-sdk-platform': '{{ sdk.platform }}',
            'x-sdk-language': '{{ language.name | caseLower }}',
            'x-sdk-version': '{{ sdk.version }}',
            {%~ for key,header in spec.global.defaultHeaders %}
            '{{key}}' : '{{header}}',
            {%~ endfor %}
        };
        this.selfSigned = false;
    }

    {%~ for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
    {%~ if header.description %}
     * {{header.description}}
     *
    {%~ endif %}
     * @param {string} {{header.key | caseLower}}
     *
     * @return Client
     */
    set{{header.key | caseUcfirst}}({{header.key | caseLower}}) {
        this.addHeader('{{header.name}}', {{header.key | caseLower}});

        return this;
    }

    {%~ endfor %}
    /**
     * Set self signed.
     *
     * @param {bool} status
     *
     * @return this
     */
    setSelfSigned(status = true) {
        this.selfSigned = status;

        return this;
    }

    /**
     * Set endpoint.
     *
     * @param {string} endpoint
     *
     * @return this
     */
    setEndpoint(endpoint)
    {
        this.endpoint = endpoint;

        return this;
    }

    /**
     * Sets a header for requests.
     * 
     * @param {string} key
     * @param {string} value
     * 
     * @return this
     */
    addHeader(key, value) {
        this.headers[key.toLowerCase()] = value;
        
        return this;
    }
      
    async call(method, path = "", headers = {}, params = {}, responseType = "json") {
        headers = {...this.headers, ...headers};
        const url = new URL(this.endpoint + path);

        let body = undefined;

        if (method.toUpperCase() === "GET") {
            url.search = new URLSearchParams(Client.flatten(params)).toString();
        } else if (headers["content-type"]?.toLowerCase().startsWith("multipart/form-data")) {
            delete headers["content-type"];
            const formData = new FormData();

            const flatParams = Client.flatten(params);

            for (const [key, value] of Object.entries(flatParams)) {
                if (value && value.type && value.type === "file") {
                    formData.append(key, value.file, value.filename);
                } else {
                    formData.append(key, value);
                }
            }

            body = formData;
        } else {
            if ('queries' in params && Array.isArray(params['queries'])) {
                params['queries'] = params['queries'].map((query) => query.toString());
            }
            body = JSON.stringify(params);
        }

      let response = undefined;
      try {
        response = await fetch(url.toString(), {
            method: method.toUpperCase(),
            headers,
            body,
            dispatcher: new Agent({
                connect: {
                    rejectUnauthorized: !this.selfSigned,
                },
            }),
        });
      } catch (error) {
        throw new {{spec.title | caseUcfirst}}Exception(error.message);
      }

      if (response.status >= 400) {
        const text = await response.text();
        let json = undefined;
        try {
            json = JSON.parse(text);
        } catch (error) {
            throw new {{spec.title | caseUcfirst}}Exception(text, response.status, "", text);
        }
        throw new {{spec.title | caseUcfirst}}Exception(json.message, json.code, json.type, json);
      }

      if (responseType === "arraybuffer") {
        const data = await response.arrayBuffer();
        return data;
      }

      const text = await response.text();
      let json = undefined;
      try {
          json = JSON.parse(text);
      } catch (error) {
          return text;
      }
      return json;
    }

    static flatten(data, prefix = "") {
        let output = {};

        for (const [key, value] of Object.entries(data)) {
            let finalKey = prefix ? prefix + "[" + key + "]" : key;

            if (Array.isArray(value)) {
                output = { ...output, ...Client.flatten(value, finalKey) };
            } else if (value instanceof Query) {
                output[finalKey] = JSON.stringify(value);
            } else {
                output[finalKey] = value;
            }
        }

        return output;
    }
}

module.exports = Client;
