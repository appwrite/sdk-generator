const os = require('os');
const axios = require("axios");
const JSONbig = require("json-bigint")({ storeAsString: false });
const FormData = require("form-data");
const {{spec.title | caseUcfirst}}Exception = require("./exception.js");
const { globalConfig } = require("./config.js");

class Client {
  static CHUNK_SIZE = 5*1024*1024; // 5MB
  
  constructor() {
    this.endpoint = '{{spec.endpoint}}';
    this.headers = {
      'content-type': '',
      'x-sdk-version': '{{spec.title | caseDash}}:{{ language.name | caseLower }}:{{ sdk.version }}',
      'User-Agent' : `{{spec.title | caseUcfirst}}CLI/{{ sdk.version }} (${os.type()} ${os.version()}; ${os.arch()})`,
{% for key,header in spec.global.defaultHeaders %}
      '{{key}}' : '{{header}}',
{% endfor %}
    };
  }

  /**
   * Set Cookie
   *
   * Your cookie
   *
   * @param {string} cookie
   *
   * @return self
   */
  setCookie(cookie) {
    this.addHeader("cookie", cookie);

    return this;
  }

{% for header in spec.global.headers %}
    /**
     * Set {{header.key | caseUcfirst}}
     *
{% if header.description %}
     * {{header.description}}
     *
{% endif %}
     * @param {string} {{header.key | caseLower}}
     *
     * @return self
     */
    set{{header.key | caseUcfirst}}({{header.key | caseLower}}) {
        this.addHeader('{{header.name}}', {{header.key | caseLower}});

        return this;
    }

{% endfor %}
  /**
   * Set self signed.
   *
   * @param {bool} status
   *
   * @return this
   */
  setSelfSigned(status) {
    this.selfSigned = status;

    return this;
  }

  /**
   * Set endpoint.
   *
   * @param {string} endpoint
   *
   * @return this
   */
  setEndpoint(endpoint) {
    this.endpoint = endpoint;

    return this;
  }

  /**
   * @param {string} key
   * @param {string} value
   */
  addHeader(key, value) {
    this.headers[key.toLowerCase()] = value;

    return this;
  }

  async call(
    method,
    path = "",
    headers = {},
    params = {},
    responseType = "json"
  ) {
    if (this.selfSigned == true) {
      // Allow self signed requests
      process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
    }

    headers = Object.assign({}, this.headers, headers);

    let contentType = headers["content-type"].toLowerCase();

    let formData = null;

    if (contentType.startsWith("multipart/form-data")) {
      const form = new FormData();

      let flatParams = Client.flatten(params);

      for (const key in flatParams) {
        form.append(key, flatParams[key]);
      }

      headers = {
        ...headers,
        ...form.getHeaders(),
      };

      formData = form;
    }

    let options = {
      method: method.toUpperCase(),
      url: this.endpoint + path,
      params: method.toUpperCase() === "GET" ? params : {},
      headers: headers,
      data:
        method.toUpperCase() === "GET" || contentType.startsWith("multipart/form-data") ? formData : params,
      json: contentType.startsWith("application/json"),
      transformRequest: method.toUpperCase() === "GET" || contentType.startsWith("multipart/form-data") ? undefined : (data) =>  JSONbig.stringify(data),
      responseType: responseType,
    };
    try {
      let response = await axios(options);
      if (response.headers["set-cookie"]) {
        globalConfig.setCookie(response.headers["set-cookie"][0]);
      }
      return response.data;
    } catch (error) {
      if ("response" in error && error.response !== undefined) {
        if (error.response && "data" in error.response) {
          if (typeof error.response.data === "string") {
            throw new {{spec.title | caseUcfirst}}Exception(
              error.response.data,
              error.response.status,
              error.response.data
            );
          } else {
            throw new {{spec.title | caseUcfirst}}Exception(
              error.response.data.message,
              error.response.status,
              error.response.data
            );
          }
        } else {
          throw new {{spec.title | caseUcfirst}}Exception(
            error.response.statusText,
            error.response.status,
            error.response.data
          );
        }
      } else {
        throw new {{spec.title | caseUcfirst}}Exception(error.message);
      }
    }
  }

  static flatten(data, prefix = "") {
    let output = {};

    for (const key in data) {
      let value = data[key];
      let finalKey = prefix ? prefix + "[" + key + "]" : key;

      if (Array.isArray(value)) {
        output = Object.assign(output, Client.flatten(value, finalKey)); // @todo: handle name collision here if needed
      } else {
        output[finalKey] = value;
      }
    }

    return output;
  }
}

module.exports = Client;
