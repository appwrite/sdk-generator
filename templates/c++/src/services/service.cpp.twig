#include <string>
#include <map>
#include "../temp_libs/json.hpp"
#include "../client.hpp"
#include "../exception.hpp"
#include "../service.hpp"
#include "{{ service.name | caseLower }}.hpp"

using string = std::string;
using json = nlohmann::json;

namespace {{ spec.title | caseUcfirst }} {
{% for method in service.methods %}
/*
 * {{ method.title }}
 *
{% if method.description %}
{{ method.description | comment1 }}
{% endif %}
{% for parameter in method.parameters.all %}
 * @param {{ parameter.type | typeName }} {{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
 * @throws {{spec.title | caseUcfirst}}Exception
 * @return {% if method.type == "location" %}string{% else %}array{% endif %}

 */
{% if method.type == "location" %}string{% else %}json{% endif %} {{ service.name | caseUcfirst }}::{{ method.name | caseCamel }}({% for parameter in method.parameters.all %}{{ parameter.type | typeName }} {{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    json params = {
{% for parameter in method.parameters.query %}
        {{ '{' }}"{{ parameter.name }}", {{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }},
{% endfor %}
{% for parameter in method.parameters.body %}
        {{ '{' }}"{{ parameter.name }}", {{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }},
{% endfor %}
{% for parameter in method.parameters.formData %}
        {{ '{' }}"{{ parameter.name }}", {{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }},
{% endfor %}
    };
    json headers = {
{% for parameter in method.parameters.header %}
        {{ '{' }}"{{ parameter.name }}", {{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }},
{% endfor %}
{% for key, header in method.headers %}
        {{ '{' }}"{{ key }}", "{{ header }}"{{ '}' }},
{% endfor %}
    };
    string path = "{{ method.path }}";
    size_t pos;
    string searchString;
{% for parameter in method.parameters.path %}
    searchString = "{{ '{' }}{{ parameter.name | caseCamel }}{{ '}' }}";
    pos = path.find(searchString);
    if (pos != std::string::npos)
        path = path.replace(pos, searchString.length(), "{{ parameter.name | caseCamel | escapeKeyword }}");
{% endfor %}

    return this->client->call(Client::METHOD_{{ method.method | caseUpper }}, path, headers, params);
}
{% if not loop.last %}

{% endif %}
{% endfor %}
} // namespace {{ spec.title | caseUcfirst }}
