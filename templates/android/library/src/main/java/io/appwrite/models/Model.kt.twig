{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst}}>{% else %}{{property.sub_schema | caseUcfirst}}{% endif %}{% else %}{% if property.type == 'object' and property.additionalProperties %}Map<String, Any>{% else %}{{property | typeName}}{% endif %}{% endif %}{% endmacro %}
package {{ sdk.namespace | caseDot }}.models

import com.google.gson.annotations.SerializedName

/**
 * {{ definition.description }}
 */
data class {{ definition.name | caseUcfirst }}(
{% for property in definition.properties %}
    /**
     * {{ property.description }}
     *
     */
    @SerializedName("{{ property.name | escapeKeyword | escapeDollarSign}}")
    {% if property.required %}val{% else%}var{% endif %} {{ property.name | escapeKeyword | removeDollarSign }}: {{_self.sub_schema(property)}}{% if not property.required %}?{% endif %}{% if not loop.last or (loop.last and definition.additionalProperties) %},{{ "\n" }}{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
    val data: Map<String, Any>
{% endif %}
) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun from(map: Map<String, Any>) = {{ definition.name | caseUcfirst }}(
{% for property in definition.properties %}
            {{ property.name | escapeKeyword | removeDollarSign }} = {% if property.sub_schema %}{% if property.type == 'array' %}(map["{{ property.name | escapeDollarSign }}"] as List<Map<String, Any>>).map { {{property.sub_schema | caseUcfirst}}.from(map = it) }{% else %}{{property.sub_schema | caseUcfirst}}.from(map = map["{{property.name | escapeDollarSign }}"] as Map<String, Any>){% endif %}{% else %}{% if property.type == "integer" or property.type == "number" %}({% endif %}map["{{ property.name | escapeDollarSign }}"]{% if property.type == "integer" or property.type == "number" %} as{% if not property.required %}?{% endif %} Number){% endif %}{% if property.type == "integer" %}{% if not property.required %}?{% endif %}.toLong(){% elseif property.type == "number" %}{% if not property.required %}?{% endif %}.toDouble(){% else %} as{% if not property.required %}?{% endif %} {{ _self.sub_schema(property) }}{% endif %}{% endif %}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
            data = map
{% endif %}
        )
    }

    fun toMap(): Map<String, Any> = mapOf(
{% for property in definition.properties %}
        "{{ property.name | escapeDollarSign }}" to {% if property.sub_schema %}{% if property.type == 'array' %}{{property.name | escapeKeyword | removeDollarSign}}.map { it.toMap() }{% else %}{{property.name | escapeKeyword | removeDollarSign}}.toMap(){% endif %}{% else %}{{property.name | escapeKeyword | removeDollarSign}}{% endif %} as Any{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

{% endfor %}
{% if definition.additionalProperties %}
        "data" to data
{% endif %}
    )
{% if definition.additionalProperties %}

    fun <T> convertTo(fromJson: (Map<String, Any>) -> T): T {
        return fromJson(data)
    }
{% endif %}
{% for property in definition.properties %}
{% if property.sub_schema %}
{% for def in spec.definitions %}
{% if def.name == property.sub_schema and def.additionalProperties and property.type == 'array' %}

    fun <T> convertTo(fromJson: (Map<String, Any>) -> T) =
        {{property.name | removeDollarSign}}.map { it.convertTo(fromJson = fromJson) }
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
}