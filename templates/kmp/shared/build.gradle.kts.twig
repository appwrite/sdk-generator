import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompileCommon

plugins {
    alias(libs.plugins.kotlinMultiplatform)
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.kotlinx.serialization)
    id("org.jetbrains.kotlinx.atomicfu") version "0.26.0"
    id("maven-publish")
    id("signing")
}

ext {
    set("PUBLISH_GROUP_ID", "{{ sdk.namespace | caseDot }}")
    set("PUBLISH_ARTIFACT_ID", "{{ sdk.gitRepoName | caseDash }}")
    set("PUBLISH_VERSION", System.getenv("SDK_VERSION"))
    set("POM_URL", "https://github.com/{{ sdk.gitUserName }}/{{ sdk.gitRepoName }}")
    set("POM_SCM_URL", "https://github.com/{{ sdk.gitUserName }}/{{ sdk.gitRepoName }}")
    set("POM_ISSUE_URL", "https://github.com/{{ sdk.gitUserName }}/{{ sdk.gitRepoName }}/issues")
    set("POM_DESCRIPTION", "{{ sdk.description }}")
    set("POM_LICENSE_URL", "https://opensource.org/licenses/GPL-3.0")
    set("POM_LICENSE_NAME", "GPL-3.0")
    set("POM_DEVELOPER_ID", "{{ sdk.gitUserName }}")
    set("POM_DEVELOPER_NAME", "{{ spec.contactName }}")
    set("POM_DEVELOPER_EMAIL", "{{ spec.contactEmail }}")
    set("GITHUB_SCM_CONNECTION", "scm:git:git://github.com/{{ sdk.gitUserName }}/{{ sdk.gitRepoName }}.git")
}

version = project.ext["PUBLISH_VERSION"].toString()
group = project.ext["PUBLISH_GROUP_ID"].toString()


kotlin {
    jvm()

    androidTarget {
        publishLibraryVariants("release", "debug")
        compilations.all {
            compileTaskProvider.configure {
                compilerOptions {
                    jvmTarget.set(JvmTarget.JVM_17)
                }
            }
        }
    }

    metadata {
        compilations.all {
            val compilationName = name
            compileTaskProvider.configure {
                if (this is KotlinCompileCommon) {
                    moduleName = "${project.group}:${project.name}_$compilationName"
                }
            }
        }
    }

    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
        binaries.all {
            // Configure native binary compilation
            freeCompilerArgs += listOf(
                "-Xallocator=mimalloc",
            )
        }
    }

    iosX64 {
        // Create a framework binary with additional options
        binaries.framework {
            baseName = "shared"
            isStatic = true
            binaryOption("bundleId", "{{ sdk.namespace | caseDot }}.shared")
        }
        withSourcesJar(publish = false)
    }
    iosArm64 {
        binaries.framework {
            baseName = "shared"
            isStatic = true
            binaryOption("bundleId", "{{ sdk.namespace | caseDot }}.shared")
        }
        withSourcesJar(publish = false)
    }
    iosSimulatorArm64 {
        binaries.framework {
            baseName = "shared"
            isStatic = true
            binaryOption("bundleId", "{{ sdk.namespace | caseDot }}.shared")
        }
        withSourcesJar(publish = false)
    }

    sourceSets {
        jvmMain.dependencies {
            implementation(libs.ktor.client.java)
        }
        commonMain.dependencies {
            implementation(libs.kotlinx.coroutines.core)
            implementation(libs.kotlinx.datetime)
            implementation(libs.kotlin.reflect)
            implementation(libs.ktor.client.core)
            implementation(libs.ktor.client.content.negotiation)
            implementation(libs.ktor.client.websockets)
            implementation(libs.okio)
            api(libs.kotlinx.serialization.json)
            api(libs.ktor.serialization.kotlinx.json)
            api(libs.napier)
        }

        androidMain.dependencies {
            implementation(libs.androidx.core.ktx)
            implementation(libs.androidx.appcompat)
            implementation(libs.androidx.lifecycle.livedata.ktx)
            implementation(libs.androidx.lifecycle.viewmodel.ktx)
            implementation(libs.androidx.navigation.fragment.ktx)
            implementation(libs.androidx.navigation.ui.ktx)
            implementation(libs.kotlinx.coroutines.android)
            implementation(libs.firebase.messaging)
            implementation(libs.ktor.client.okhttp)
            implementation(libs.ktor.client.logging)
            implementation(libs.androidx.datastore)
            implementation(libs.androidx.datastore.preferences)
            implementation(libs.gson)
            implementation(project.dependencies.platform("com.google.firebase:firebase-bom:33.6.0"))
        }

        iosMain.dependencies {
            implementation(libs.jetbrains.kotlinx.coroutines.core)
            implementation(libs.ktor.client.darwin)
        }

        commonTest.dependencies {
            implementation(libs.kotlin.test)
            implementation(libs.kotlinx.coroutines.test)
        }

        androidUnitTest.dependencies {
            implementation(libs.junit)
            implementation(libs.androidx.test.core)
            implementation(libs.androidx.junit)
            implementation(libs.androidx.test.runner)
            implementation(libs.robolectric)
            implementation(libs.ktor.client.mock)
        }

        androidInstrumentedTest.dependencies {
            implementation(libs.androidx.junit)
            implementation(libs.androidx.espresso.core)
        }
    }
}

publishing {
    publications.withType<MavenPublication> {
        artifactId = if (name != "kotlinMultiplatform") {
            // Append the target name to the artifactId so each publication is unique.
            "${project.ext["PUBLISH_ARTIFACT_ID"].toString()}-$name"
        } else {
            project.ext["PUBLISH_ARTIFACT_ID"].toString()
        }

        pom {
            name.set(project.ext["PUBLISH_ARTIFACT_ID"].toString())
            description.set(project.ext["POM_DESCRIPTION"].toString())
            url.set(project.ext["POM_URL"].toString())

            licenses {
                license {
                    name.set(project.ext["POM_LICENSE_NAME"].toString())
                    url.set(project.ext["POM_LICENSE_URL"].toString())
                }
            }

            developers {
                developer {
                    id.set(project.ext["POM_DEVELOPER_ID"].toString())
                    name.set(project.ext["POM_DEVELOPER_NAME"].toString())
                    email.set(project.ext["POM_DEVELOPER_EMAIL"].toString())
                }
            }

            scm {
                connection.set(project.ext["GITHUB_SCM_CONNECTION"].toString())
                url.set(project.ext["POM_SCM_URL"].toString())
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = uri(
                if (version.toString().endsWith("SNAPSHOT")) {
                    "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
            )
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

android {
    namespace = "{{ sdk.namespace | caseDot }}.kmp"
    compileSdk = 35
    defaultConfig {
        minSdk = 21
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    testOptions {
        unitTests {
            isIncludeAndroidResources = true
            all { it.useJUnit() }
        }
    }
}

dependencies {
    implementation(libs.androidx.activity.ktx)
    implementation(libs.androidx.browser)
    implementation(libs.androidx.espresso.core)
    implementation(libs.firebase.crashlytics.buildtools)
}