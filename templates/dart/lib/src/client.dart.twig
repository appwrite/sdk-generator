import 'enums.dart';
import 'client_stub.dart'
    if (dart.library.html) 'client_browser.dart'
    if (dart.library.io) 'client_io.dart';
import 'response.dart';
import 'upload_progress.dart';

abstract class Client {
  static const int CHUNK_SIZE = 5*1024*1024;
  late Map<String, String> config;
  late String _endPoint;

  String get endPoint => _endPoint;

  factory Client(
          {String endPoint = '{{ spec.endpoint }}',
          bool selfSigned = false}) =>
      createClient(endPoint: endPoint, selfSigned: selfSigned);

  Client setSelfSigned({bool status = true});

  Client setEndpoint(String endPoint);

{% for header in spec.global.headers %}
{% if header.description %}
  /// {{header.description}}
{% endif %}
  Client set{{header.key | caseUcfirst}}(value);
{% endfor %}

  Client addHeader(String key, String value);

  Future<Response> chunkedUpload({
    required String path,
    required Map<String, dynamic> params,
    required String paramName,
    required String idParamName,
    required Map<String, String> headers,
    Function(UploadProgress)? onProgress,
  });

  Future<Response> call(HttpMethod method, {
    String path = '',
    Map<String, String> headers = const {},
    Map<String, dynamic> params = const {},
    ResponseType? responseType,
  });
}
