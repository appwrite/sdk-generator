from ..service import Service
from typing import List, Dict, Any
from ..exception import AppwriteException
{% set added = [] %}
{% for method in service.methods %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' and parameter.type not in added %}
from ..input_file import InputFile
{% set added = added|merge(['InputFile']) %}
{% endif %}
{% if parameter.enumValues is not empty%}
{% if parameter.enumName is not empty %}
{% set name = parameter.enumName %}
{% else %}
{% set name = parameter.name %}
{% endif %}
{% if name not in added %}
from ..enums.{{ name | caseSnake }} import {{ name | caseUcfirst }};
{% set added = added|merge([name]) %}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}

class {{ service.name | caseUcfirst }}(Service):

    def __init__(self, client) -> None:
        super({{ service.name | caseUcfirst }}, self).__init__(client)
{% for method in service.methods %}

    def {{ method.name | caseSnake }}(self{% if method.parameters.all|length > 0 %}, {% endif %}{% for parameter in method.parameters.all %}{{ parameter.name | escapeKeyword | caseSnake }}: {{ parameter | getPropertyType(method) | raw }}{% if not parameter.required %} = None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}{% if 'multipart/form-data' in method.consumes %}, on_progress = None{% endif %}) -> {% if method.type == 'webAuth' %}str{% elseif method.type == 'location' %}bytes{% else %}Dict[str, Any]{% endif %}:
        """
        {% autoescape false %}{{ method.description | replace({"\n": "\n        "}) }}{% endautoescape %}

{% if method.parameters.all|length > 0 or 'multipart/form-data' in method.consumes %}

        Parameters
        ----------
        {% for parameter in method.parameters.all %}{{ parameter.name | escapeKeyword | caseSnake }} : {{ parameter | getPropertyType(method) | raw }}
            {% autoescape false %}{{ parameter.description | replace({"\n": "\n            "}) }}{% endautoescape %}

        {% endfor %}{% if 'multipart/form-data' in method.consumes %}
        on_progress : callable, optional
            Optional callback for upload progress
        {% endif %}{% endif %}

        Returns
        -------
        {% if method.type == 'webAuth' %}str
            Authentication response as a string
        {% elseif method.type == 'location' %}bytes
            Response as bytes
        {% else %}Dict[str, Any]
            API response as a dictionary
        {% endif %}

        Raises
        ------
        AppwriteException
            If API request fails
        """

        api_path = '{{ method.path }}'
{{ include('python/base/params.twig') }}
{% if 'multipart/form-data' in method.consumes %}
{{ include('python/base/requests/file.twig') }}
{% else %}
{{ include('python/base/requests/api.twig') }}
{% endif %}
{% endfor %}
