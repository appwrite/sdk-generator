import io
import httpx
import os
from ..input_file import InputFile
from ..exception import {{spec.title | caseUcfirst}}Exception
from ..client import Client

class AsyncClient(Client):

    async def call(self, method, path='', headers=None, params=None, timeout=None):
        if headers is None:
            headers = {}

        if params is None:
            params = {}

        data = {}
        json = {}
        files = {}
        stringify = False
        
        headers = {**self._global_headers, **headers}

        if method != 'get':
            data = params
            params = {}

        if headers['content-type'].startswith('application/json'):
            json = data
            data = {}

        if headers['content-type'].startswith('multipart/form-data'):
            del headers['content-type']
            stringify = True
            for key in data.copy():
                if isinstance(data[key], InputFile):
                    files[key] = (data[key].name, data[key].file)
                    del data[key]
        response = None
        try:
            async with httpx.AsyncClient(verify=(not self._self_signed), follow_redirects=True) as client:
                response = await client.request( 
                    method=method,
                    url=self._endpoint + path,
                    params=self.flatten(params, stringify=stringify),
                    data=self.flatten(data),
                    json=json,
                    files=files,
                    headers=headers,
                    timeout=timeout
                )

                response.raise_for_status()

                content_type = response.headers['Content-Type']

                if content_type.startswith('application/json'):
                    return response.json()

                return response._content
        except Exception as e:
            if response != None:
                content_type = response.headers['Content-Type']
                if content_type.startswith('application/json'):
                    raise {{spec.title | caseUcfirst}}Exception(response.json()['message'], response.status_code, response.json().get('type'), response.json())
                else:
                    raise {{spec.title | caseUcfirst}}Exception(response.text, response.status_code)
            else:
                raise {{spec.title | caseUcfirst}}Exception(e)

    async def chunked_upload(
        self,
        path,
        headers = None,
        params = None,
        param_name = '',
        on_progress = None,
        upload_id = '',
    ):
        file_path = str(params[param_name])
        file_name = os.path.basename(file_path)
        size = os.stat(file_path).st_size

        if size < self._chunk_size:
            slice = open(file_path, 'rb').read()
            params[param_name] = InputFile(file_path, file_name, slice)
            return await self.call(
                'post',
                path,
                headers,
                params
            )

        input = open(file_path, 'rb')
        offset = 0
        counter = 0

        if upload_id != 'unique()':
            try:
                result = await self.call('get', path + '/' + upload_id, headers)
                counter = result['chunksUploaded']
            except:
                pass

        if counter > 0:
            offset = counter * self._chunk_size
            input.seek(offset)

        while offset < size:
            slice = input.read(self._chunk_size) or input.read(size - offset)

            params[param_name] = InputFile(file_path, file_name, slice)
            headers["content-range"] = f'bytes {offset}-{min((offset + self._chunk_size) - 1, size)}/{size}'

            result = await self.call(
                'post',
                path,
                headers,
                params,
            )
            
            offset = offset + self._chunk_size
            
            if "$id" in result: 
                headers["x-{{ spec.title | caseLower }}-id"] = result["$id"]

            if on_progress is not None:
                end = min((((counter * self._chunk_size) + self._chunk_size) - 1), size)
                on_progress({
                    "$id": result["$id"],
                    "progress": min(offset, size)/size * 100,
                    "sizeUploaded": end+1,
                    "chunksTotal": result["chunksTotal"],
                    "chunksUploaded": result["chunksUploaded"],
                })

            counter = counter + 1

        return result


