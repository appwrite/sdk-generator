{% macro resultType(spec, method) %}
{% if method.type == "webAuth" %}Bool{% elseif method.type == "location" %}ByteBuffer{% elseif not method.responseModel or method.responseModel == 'any' %}Any{% else %}{{spec.title | caseUcfirst}}Models.{{method.responseModel | caseUcfirst}}{% endif %}
{% endmacro %}
import AsyncHTTPClient
import Foundation
import NIO
import {{spec.title | caseUcfirst}}Models

open class {{ service.name | caseUcfirst }}: Service {
{% for method in service.methods %}
    ///
    /// {{ method.title }}
    ///
{% if method.description %}
{{ method.description | swiftComment }}
    ///
{% endif %}
{% for parameter in method.parameters.all %}
    /// @param {{ parameter | typeName | raw}} {{ parameter.name | caseCamel }}
{% endfor %}
    /// @throws Exception
    /// @return array
    ///
{% if method.type == "webAuth" %}
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
{% endif %}
    open func {{ method.name | caseCamel }}(
{% for parameter in method.parameters.all %}
        {{ parameter.name | caseCamel | escapeKeyword }}: {{ parameter | typeName | raw }}{% if not parameter.required %}? = nil{% endif %}{% if not loop.last or 'multipart/form-data' in method.consumes %},{% endif %}

{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
        onProgress: ((UploadProgress) -> Void)? = nil
{% endif %}
    ) async throws -> {{ _self.resultType(spec, method) }} {
{{include('swift/base/params.twig')}}
{% if method.type == 'webAuth' %}
{{include('swift/base/requests/OAuth.twig')}}
{% elseif method.type == 'location' %}
{{include('swift/base/requests/location.twig')}}
{% else %}
        {% if 'multipart/form-data' in method.consumes %}var{% else %}let{% endif %} headers: [String: String] = [
{{ method.headers|map((header, key) => "            \"#{key}\": \"#{header}\"")|join(',\n')|raw }}
        ]
{% if method.responseModel %}
        let converter: ([String: Any]) -> {{ _self.resultType(spec, method) }} = { dict in
{% if method.responseModel == 'any' %}
            return dict
{% else %}
            return {{ spec.title | caseUcfirst}}Models.{{method.responseModel | caseUcfirst}}.from(map: dict)
{% endif %}
        }
{% endif %}
{% if 'multipart/form-data' in method.consumes %}
{{include('swift/base/requests/file.twig')}}
{% else %}
{{include('swift/base/requests/api.twig')}}
{% endif %}
{% endif %}
    }

{% endfor %}

{% for method in service.methods %}
    ///
    /// {{ method.title }}
    ///
{% if method.description %}
{{ method.description | swiftComment }}
    ///
{% endif %}
{% for parameter in method.parameters.all %}
    /// @param {{ parameter | typeName | raw}} {{ parameter.name | caseCamel }}
{% endfor %}
    /// @throws Exception
    /// @return array
    ///
    @available(*, deprecated, message: "Use the async overload instead")
{% if method.type == "webAuth" %}
    @available(iOS 14.0, macOS 11.0, tvOS 14.0, watchOS 7.0, *)
{% endif %}
    open func {{ method.name | caseCamel }}(
{% for parameter in method.parameters.all %}
        {{ parameter.name | caseCamel | escapeKeyword }}: {{ parameter | typeName | raw }}{% if not parameter.required %}? = nil{% endif %},
{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
        onProgress: ((UploadProgress) -> Void)? = nil,
{% endif %}
        completion: ((Result<{{ _self.resultType(spec, method) }}, {{ spec.title | caseUcfirst}}Error>) -> Void)? = nil
    ) {
        Task {
            do {
                let result = try await {{ method.name | caseCamel }}(
{% for parameter in method.parameters.all %}
                    {{ parameter.name | caseCamel | escapeKeyword }}: {{ parameter.name | caseCamel | escapeKeyword }}{% if not loop.last or 'multipart/form-data' in method.consumes %},{% endif %}

{% endfor %}
{% if 'multipart/form-data' in method.consumes %}
                    onProgress: onProgress
{% endif %}
                )
                completion?(.success(result))
            } catch {
                completion?(.failure(error as! {{ spec.title | caseUcfirst}}Error))
            }
        }
    }

{% endfor %}
}
